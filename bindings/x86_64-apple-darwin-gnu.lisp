;; Generated by :claw at 2022-03-11T03:27:51.364428Z
(uiop:define-package :%sqlite (:use))
(uiop:define-package :hickory-sqlite-bindings~pristine (:use :cl))
(common-lisp:in-package :hickory-sqlite-bindings~pristine)

(defparameter %sqlite::+sqlite3-h+ nil)

(defparameter %sqlite::+sqlite3-text+ 3)

(defparameter %sqlite::+abort+ 4)

(defparameter %sqlite::+abort-rollback+ 516)

(defparameter %sqlite::+access-exists+ 0)

(defparameter %sqlite::+access-read+ 2)

(defparameter %sqlite::+access-readwrite+ 1)

(defparameter %sqlite::+alter-table+ 26)

(defparameter %sqlite::+analyze+ 28)

(defparameter %sqlite::+any+ 5)

(defparameter %sqlite::+api+ nil)

(defparameter %sqlite::+apicall+ nil)

(defparameter %sqlite::+attach+ 24)

(defparameter %sqlite::+auth+ 23)

(defparameter %sqlite::+auth-user+ 279)

(defparameter %sqlite::+blob+ 4)

(defparameter %sqlite::+busy+ 5)

(defparameter %sqlite::+busy-recovery+ 261)

(defparameter %sqlite::+busy-snapshot+ 517)

(defparameter %sqlite::+busy-timeout+ 773)

(defparameter %sqlite::+callback+ nil)

(defparameter %sqlite::+cantopen+ 14)

(defparameter %sqlite::+cantopen-convpath+ 1038)

(defparameter %sqlite::+cantopen-dirtywal+ 1294)

(defparameter %sqlite::+cantopen-fullpath+ 782)

(defparameter %sqlite::+cantopen-isdir+ 526)

(defparameter %sqlite::+cantopen-notempdir+ 270)

(defparameter %sqlite::+cantopen-symlink+ 1550)

(defparameter %sqlite::+cdecl+ nil)

(defparameter %sqlite::+checkpoint-full+ 1)

(defparameter %sqlite::+checkpoint-passive+ 0)

(defparameter %sqlite::+checkpoint-restart+ 2)

(defparameter %sqlite::+checkpoint-truncate+ 3)

(defparameter %sqlite::+config-covering-index-scan+ 20)

(defparameter %sqlite::+config-getmalloc+ 5)

(defparameter %sqlite::+config-getmutex+ 11)

(defparameter %sqlite::+config-getpcache+ 15)

(defparameter %sqlite::+config-getpcache2+ 19)

(defparameter %sqlite::+config-heap+ 8)

(defparameter %sqlite::+config-log+ 16)

(defparameter %sqlite::+config-lookaside+ 13)

(defparameter %sqlite::+config-malloc+ 4)

(defparameter %sqlite::+config-memdb-maxsize+ 29)

(defparameter %sqlite::+config-memstatus+ 9)

(defparameter %sqlite::+config-mmap-size+ 22)

(defparameter %sqlite::+config-multithread+ 2)

(defparameter %sqlite::+config-mutex+ 10)

(defparameter %sqlite::+config-pagecache+ 7)

(defparameter %sqlite::+config-pcache+ 14)

(defparameter %sqlite::+config-pcache2+ 18)

(defparameter %sqlite::+config-pcache-hdrsz+ 24)

(defparameter %sqlite::+config-pmasz+ 25)

(defparameter %sqlite::+config-scratch+ 6)

(defparameter %sqlite::+config-serialized+ 3)

(defparameter %sqlite::+config-singlethread+ 1)

(defparameter %sqlite::+config-small-malloc+ 27)

(defparameter %sqlite::+config-sorterref-size+ 28)

(defparameter %sqlite::+config-sqllog+ 21)

(defparameter %sqlite::+config-stmtjrnl-spill+ 26)

(defparameter %sqlite::+config-uri+ 17)

(defparameter %sqlite::+config-win32-heapsize+ 23)

(defparameter %sqlite::+constraint+ 19)

(defparameter %sqlite::+constraint-check+ 275)

(defparameter %sqlite::+constraint-commithook+ 531)

(defparameter %sqlite::+constraint-datatype+ 3091)

(defparameter %sqlite::+constraint-foreignkey+ 787)

(defparameter %sqlite::+constraint-function+ 1043)

(defparameter %sqlite::+constraint-notnull+ 1299)

(defparameter %sqlite::+constraint-pinned+ 2835)

(defparameter %sqlite::+constraint-primarykey+ 1555)

(defparameter %sqlite::+constraint-rowid+ 2579)

(defparameter %sqlite::+constraint-trigger+ 1811)

(defparameter %sqlite::+constraint-unique+ 2067)

(defparameter %sqlite::+constraint-vtab+ 2323)

(defparameter %sqlite::+copy+ 0)

(defparameter %sqlite::+corrupt+ 11)

(defparameter %sqlite::+corrupt-index+ 779)

(defparameter %sqlite::+corrupt-sequence+ 523)

(defparameter %sqlite::+corrupt-vtab+ 267)

(defparameter %sqlite::+create-index+ 1)

(defparameter %sqlite::+create-table+ 2)

(defparameter %sqlite::+create-temp-index+ 3)

(defparameter %sqlite::+create-temp-table+ 4)

(defparameter %sqlite::+create-temp-trigger+ 5)

(defparameter %sqlite::+create-temp-view+ 6)

(defparameter %sqlite::+create-trigger+ 7)

(defparameter %sqlite::+create-view+ 8)

(defparameter %sqlite::+create-vtable+ 29)

(defparameter %sqlite::+dbconfig-defensive+ 1010)

(defparameter %sqlite::+dbconfig-dqs-ddl+ 1014)

(defparameter %sqlite::+dbconfig-dqs-dml+ 1013)

(defparameter %sqlite::+dbconfig-enable-fkey+ 1002)

(defparameter %sqlite::+dbconfig-enable-fts3-tokenizer+ 1004)

(defparameter %sqlite::+dbconfig-enable-load-extension+ 1005)

(defparameter %sqlite::+dbconfig-enable-qpsg+ 1007)

(defparameter %sqlite::+dbconfig-enable-trigger+ 1003)

(defparameter %sqlite::+dbconfig-enable-view+ 1015)

(defparameter %sqlite::+dbconfig-legacy-alter-table+ 1012)

(defparameter %sqlite::+dbconfig-legacy-file-format+ 1016)

(defparameter %sqlite::+dbconfig-lookaside+ 1001)

(defparameter %sqlite::+dbconfig-maindbname+ 1000)

(defparameter %sqlite::+dbconfig-max+ 1017)

(defparameter %sqlite::+dbconfig-no-ckpt-on-close+ 1006)

(defparameter %sqlite::+dbconfig-reset-database+ 1009)

(defparameter %sqlite::+dbconfig-trigger-eqp+ 1008)

(defparameter %sqlite::+dbconfig-trusted-schema+ 1017)

(defparameter %sqlite::+dbconfig-writable-schema+ 1011)

(defparameter %sqlite::+dbstatus-cache-hit+ 7)

(defparameter %sqlite::+dbstatus-cache-miss+ 8)

(defparameter %sqlite::+dbstatus-cache-spill+ 12)

(defparameter %sqlite::+dbstatus-cache-used+ 1)

(defparameter %sqlite::+dbstatus-cache-used-shared+ 11)

(defparameter %sqlite::+dbstatus-cache-write+ 9)

(defparameter %sqlite::+dbstatus-deferred-fks+ 10)

(defparameter %sqlite::+dbstatus-lookaside-hit+ 4)

(defparameter %sqlite::+dbstatus-lookaside-miss-full+ 6)

(defparameter %sqlite::+dbstatus-lookaside-miss-size+ 5)

(defparameter %sqlite::+dbstatus-lookaside-used+ 0)

(defparameter %sqlite::+dbstatus-max+ 12)

(defparameter %sqlite::+dbstatus-schema-used+ 2)

(defparameter %sqlite::+dbstatus-stmt-used+ 3)

(defparameter %sqlite::+delete+ 9)

(defparameter %sqlite::+deny+ 1)

(defparameter %sqlite::+deprecated+ nil)

(defparameter %sqlite::+deserialize-freeonclose+ 1)

(defparameter %sqlite::+deserialize-readonly+ 4)

(defparameter %sqlite::+deserialize-resizeable+ 2)

(defparameter %sqlite::+detach+ 25)

(defparameter %sqlite::+deterministic+ 2048)

(defparameter %sqlite::+directonly+ 524288)

(defparameter %sqlite::+done+ 101)

(defparameter %sqlite::+drop-index+ 10)

(defparameter %sqlite::+drop-table+ 11)

(defparameter %sqlite::+drop-temp-index+ 12)

(defparameter %sqlite::+drop-temp-table+ 13)

(defparameter %sqlite::+drop-temp-trigger+ 14)

(defparameter %sqlite::+drop-temp-view+ 15)

(defparameter %sqlite::+drop-trigger+ 16)

(defparameter %sqlite::+drop-view+ 17)

(defparameter %sqlite::+drop-vtable+ 30)

(defparameter %sqlite::+empty+ 16)

(defparameter %sqlite::+error+ 1)

(defparameter %sqlite::+error-missing-collseq+ 257)

(defparameter %sqlite::+error-retry+ 513)

(defparameter %sqlite::+error-snapshot+ 769)

(defparameter %sqlite::+experimental+ nil)

(defparameter %sqlite::+extern+ nil)

(defparameter %sqlite::+fail+ 3)

(defparameter %sqlite::+fcntl-begin-atomic-write+ 31)

(defparameter %sqlite::+fcntl-busyhandler+ 15)

(defparameter %sqlite::+fcntl-chunk-size+ 6)

(defparameter %sqlite::+fcntl-ckpt-done+ 37)

(defparameter %sqlite::+fcntl-ckpt-start+ 39)

(defparameter %sqlite::+fcntl-cksm-file+ 41)

(defparameter %sqlite::+fcntl-commit-atomic-write+ 32)

(defparameter %sqlite::+fcntl-commit-phasetwo+ 22)

(defparameter %sqlite::+fcntl-data-version+ 35)

(defparameter %sqlite::+fcntl-external-reader+ 40)

(defparameter %sqlite::+fcntl-file-pointer+ 7)

(defparameter %sqlite::+fcntl-get-lockproxyfile+ 2)

(defparameter %sqlite::+fcntl-has-moved+ 20)

(defparameter %sqlite::+fcntl-journal-pointer+ 28)

(defparameter %sqlite::+fcntl-last-errno+ 4)

(defparameter %sqlite::+fcntl-lockstate+ 1)

(defparameter %sqlite::+fcntl-lock-timeout+ 34)

(defparameter %sqlite::+fcntl-mmap-size+ 18)

(defparameter %sqlite::+fcntl-overwrite+ 11)

(defparameter %sqlite::+fcntl-pdb+ 30)

(defparameter %sqlite::+fcntl-persist-wal+ 10)

(defparameter %sqlite::+fcntl-powersafe-overwrite+ 13)

(defparameter %sqlite::+fcntl-pragma+ 14)

(defparameter %sqlite::+fcntl-rbu+ 26)

(defparameter %sqlite::+fcntl-reserve-bytes+ 38)

(defparameter %sqlite::+fcntl-rollback-atomic-write+ 33)

(defparameter %sqlite::+fcntl-set-lockproxyfile+ 3)

(defparameter %sqlite::+fcntl-size-hint+ 5)

(defparameter %sqlite::+fcntl-size-limit+ 36)

(defparameter %sqlite::+fcntl-sync+ 21)

(defparameter %sqlite::+fcntl-sync-omitted+ 8)

(defparameter %sqlite::+fcntl-tempfilename+ 16)

(defparameter %sqlite::+fcntl-trace+ 19)

(defparameter %sqlite::+fcntl-vfsname+ 12)

(defparameter %sqlite::+fcntl-vfs-pointer+ 27)

(defparameter %sqlite::+fcntl-wal-block+ 24)

(defparameter %sqlite::+fcntl-win32-av-retry+ 9)

(defparameter %sqlite::+fcntl-win32-get-handle+ 29)

(defparameter %sqlite::+fcntl-win32-set-handle+ 23)

(defparameter %sqlite::+fcntl-zipvfs+ 25)

(defparameter %sqlite::+float+ 2)

(defparameter %sqlite::+format+ 24)

(defparameter %sqlite::+full+ 13)

(defparameter %sqlite::+function+ 31)

(defparameter %sqlite::+get-lockproxyfile+ 2)

(defparameter %sqlite::+ignore+ 2)

(defparameter %sqlite::+index-constraint-eq+ 2)

(defparameter %sqlite::+index-constraint-function+ 150)

(defparameter %sqlite::+index-constraint-ge+ 32)

(defparameter %sqlite::+index-constraint-glob+ 66)

(defparameter %sqlite::+index-constraint-gt+ 4)

(defparameter %sqlite::+index-constraint-is+ 72)

(defparameter %sqlite::+index-constraint-isnot+ 69)

(defparameter %sqlite::+index-constraint-isnotnull+ 70)

(defparameter %sqlite::+index-constraint-isnull+ 71)

(defparameter %sqlite::+index-constraint-le+ 8)

(defparameter %sqlite::+index-constraint-like+ 65)

(defparameter %sqlite::+index-constraint-limit+ 73)

(defparameter %sqlite::+index-constraint-lt+ 16)

(defparameter %sqlite::+index-constraint-match+ 64)

(defparameter %sqlite::+index-constraint-ne+ 68)

(defparameter %sqlite::+index-constraint-offset+ 74)

(defparameter %sqlite::+index-constraint-regexp+ 67)

(defparameter %sqlite::+index-scan-unique+ 1)

(defparameter %sqlite::+innocuous+ 2097152)

(defparameter %sqlite::+insert+ 18)

(defparameter %sqlite::+integer+ 1)

(defparameter %sqlite::+internal+ 2)

(defparameter %sqlite::+interrupt+ 9)

(defparameter %sqlite::+iocap-atomic+ 1)

(defparameter %sqlite::+iocap-atomic16k+ 64)

(defparameter %sqlite::+iocap-atomic1k+ 4)

(defparameter %sqlite::+iocap-atomic2k+ 8)

(defparameter %sqlite::+iocap-atomic32k+ 128)

(defparameter %sqlite::+iocap-atomic4k+ 16)

(defparameter %sqlite::+iocap-atomic512+ 2)

(defparameter %sqlite::+iocap-atomic64k+ 256)

(defparameter %sqlite::+iocap-atomic8k+ 32)

(defparameter %sqlite::+iocap-batch-atomic+ 16384)

(defparameter %sqlite::+iocap-immutable+ 8192)

(defparameter %sqlite::+iocap-powersafe-overwrite+ 4096)

(defparameter %sqlite::+iocap-safe-append+ 512)

(defparameter %sqlite::+iocap-sequential+ 1024)

(defparameter %sqlite::+iocap-undeletable-when-open+ 2048)

(defparameter %sqlite::+ioerr+ 10)

(defparameter %sqlite::+ioerr-access+ 3338)

(defparameter %sqlite::+ioerr-auth+ 7178)

(defparameter %sqlite::+ioerr-begin-atomic+ 7434)

(defparameter %sqlite::+ioerr-blocked+ 2826)

(defparameter %sqlite::+ioerr-checkreservedlock+ 3594)

(defparameter %sqlite::+ioerr-close+ 4106)

(defparameter %sqlite::+ioerr-commit-atomic+ 7690)

(defparameter %sqlite::+ioerr-convpath+ 6666)

(defparameter %sqlite::+ioerr-corruptfs+ 8458)

(defparameter %sqlite::+ioerr-data+ 8202)

(defparameter %sqlite::+ioerr-delete+ 2570)

(defparameter %sqlite::+ioerr-delete-noent+ 5898)

(defparameter %sqlite::+ioerr-dir-close+ 4362)

(defparameter %sqlite::+ioerr-dir-fsync+ 1290)

(defparameter %sqlite::+ioerr-fstat+ 1802)

(defparameter %sqlite::+ioerr-fsync+ 1034)

(defparameter %sqlite::+ioerr-gettemppath+ 6410)

(defparameter %sqlite::+ioerr-lock+ 3850)

(defparameter %sqlite::+ioerr-mmap+ 6154)

(defparameter %sqlite::+ioerr-nomem+ 3082)

(defparameter %sqlite::+ioerr-rdlock+ 2314)

(defparameter %sqlite::+ioerr-read+ 266)

(defparameter %sqlite::+ioerr-rollback-atomic+ 7946)

(defparameter %sqlite::+ioerr-seek+ 5642)

(defparameter %sqlite::+ioerr-shmlock+ 5130)

(defparameter %sqlite::+ioerr-shmmap+ 5386)

(defparameter %sqlite::+ioerr-shmopen+ 4618)

(defparameter %sqlite::+ioerr-shmsize+ 4874)

(defparameter %sqlite::+ioerr-short-read+ 522)

(defparameter %sqlite::+ioerr-truncate+ 1546)

(defparameter %sqlite::+ioerr-unlock+ 2058)

(defparameter %sqlite::+ioerr-vnode+ 6922)

(defparameter %sqlite::+ioerr-write+ 778)

(defparameter %sqlite::+last-errno+ 4)

(defparameter %sqlite::+limit-attached+ 7)

(defparameter %sqlite::+limit-column+ 2)

(defparameter %sqlite::+limit-compound-select+ 4)

(defparameter %sqlite::+limit-expr-depth+ 3)

(defparameter %sqlite::+limit-function-arg+ 6)

(defparameter %sqlite::+limit-length+ 0)

(defparameter %sqlite::+limit-like-pattern-length+ 8)

(defparameter %sqlite::+limit-sql-length+ 1)

(defparameter %sqlite::+limit-trigger-depth+ 10)

(defparameter %sqlite::+limit-variable-number+ 9)

(defparameter %sqlite::+limit-vdbe-op+ 5)

(defparameter %sqlite::+limit-worker-threads+ 11)

(defparameter %sqlite::+locked+ 6)

(defparameter %sqlite::+locked-sharedcache+ 262)

(defparameter %sqlite::+locked-vtab+ 518)

(defparameter %sqlite::+lock-exclusive+ 4)

(defparameter %sqlite::+lock-none+ 0)

(defparameter %sqlite::+lock-pending+ 3)

(defparameter %sqlite::+lock-reserved+ 2)

(defparameter %sqlite::+lock-shared+ 1)

(defparameter %sqlite::+mismatch+ 20)

(defparameter %sqlite::+misuse+ 21)

(defparameter %sqlite::+mutex-fast+ 0)

(defparameter %sqlite::+mutex-recursive+ 1)

(defparameter %sqlite::+mutex-static-app1+ 8)

(defparameter %sqlite::+mutex-static-app2+ 9)

(defparameter %sqlite::+mutex-static-app3+ 10)

(defparameter %sqlite::+mutex-static-lru+ 6)

(defparameter %sqlite::+mutex-static-lru2+ 7)

(defparameter %sqlite::+mutex-static-main+ 2)

(defparameter %sqlite::+mutex-static-master+ 2)

(defparameter %sqlite::+mutex-static-mem+ 3)

(defparameter %sqlite::+mutex-static-mem2+ 4)

(defparameter %sqlite::+mutex-static-open+ 4)

(defparameter %sqlite::+mutex-static-pmem+ 7)

(defparameter %sqlite::+mutex-static-prng+ 5)

(defparameter %sqlite::+mutex-static-vfs1+ 11)

(defparameter %sqlite::+mutex-static-vfs2+ 12)

(defparameter %sqlite::+mutex-static-vfs3+ 13)

(defparameter %sqlite::+nolfs+ 22)

(defparameter %sqlite::+nomem+ 7)

(defparameter %sqlite::+notadb+ 26)

(defparameter %sqlite::+notfound+ 12)

(defparameter %sqlite::+notice+ 27)

(defparameter %sqlite::+notice-recover-rollback+ 539)

(defparameter %sqlite::+notice-recover-wal+ 283)

(defparameter %sqlite::+null+ 5)

(defparameter %sqlite::+ok+ 0)

(defparameter %sqlite::+ok-load-permanently+ 256)

(defparameter %sqlite::+ok-symlink+ 512)

(defparameter %sqlite::+open-autoproxy+ 32)

(defparameter %sqlite::+open-create+ 4)

(defparameter %sqlite::+open-deleteonclose+ 8)

(defparameter %sqlite::+open-exclusive+ 16)

(defparameter %sqlite::+open-exrescode+ 33554432)

(defparameter %sqlite::+open-fullmutex+ 65536)

(defparameter %sqlite::+open-main-db+ 256)

(defparameter %sqlite::+open-main-journal+ 2048)

(defparameter %sqlite::+open-master-journal+ 16384)

(defparameter %sqlite::+open-memory+ 128)

(defparameter %sqlite::+open-nofollow+ 16777216)

(defparameter %sqlite::+open-nomutex+ 32768)

(defparameter %sqlite::+open-privatecache+ 262144)

(defparameter %sqlite::+open-readonly+ 1)

(defparameter %sqlite::+open-readwrite+ 2)

(defparameter %sqlite::+open-sharedcache+ 131072)

(defparameter %sqlite::+open-subjournal+ 8192)

(defparameter %sqlite::+open-super-journal+ 16384)

(defparameter %sqlite::+open-temp-db+ 512)

(defparameter %sqlite::+open-temp-journal+ 4096)

(defparameter %sqlite::+open-transient-db+ 1024)

(defparameter %sqlite::+open-uri+ 64)

(defparameter %sqlite::+open-wal+ 524288)

(defparameter %sqlite::+perm+ 3)

(defparameter %sqlite::+pragma+ 19)

(defparameter %sqlite::+prepare-normalize+ 2)

(defparameter %sqlite::+prepare-no-vtab+ 4)

(defparameter %sqlite::+prepare-persistent+ 1)

(defparameter %sqlite::+protocol+ 15)

(defparameter %sqlite::+range+ 25)

(defparameter %sqlite::+read+ 20)

(defparameter %sqlite::+readonly+ 8)

(defparameter %sqlite::+readonly-cantinit+ 1288)

(defparameter %sqlite::+readonly-cantlock+ 520)

(defparameter %sqlite::+readonly-dbmoved+ 1032)

(defparameter %sqlite::+readonly-directory+ 1544)

(defparameter %sqlite::+readonly-recovery+ 264)

(defparameter %sqlite::+readonly-rollback+ 776)

(defparameter %sqlite::+recursive+ 33)

(defparameter %sqlite::+reindex+ 27)

(defparameter %sqlite::+replace+ 5)

(defparameter %sqlite::+rollback+ 1)

(defparameter %sqlite::+row+ 100)

(defparameter %sqlite::+savepoint+ 32)

(defparameter %sqlite::+scanstat-est+ 2)

(defparameter %sqlite::+scanstat-explain+ 4)

(defparameter %sqlite::+scanstat-name+ 3)

(defparameter %sqlite::+scanstat-nloop+ 0)

(defparameter %sqlite::+scanstat-nvisit+ 1)

(defparameter %sqlite::+scanstat-selectid+ 5)

(defparameter %sqlite::+schema+ 17)

(defparameter %sqlite::+select+ 21)

(defparameter %sqlite::+serialize-nocopy+ 1)

(defparameter %sqlite::+set-lockproxyfile+ 3)

(defparameter %sqlite::+shm-exclusive+ 8)

(defparameter %sqlite::+shm-lock+ 2)

(defparameter %sqlite::+shm-nlock+ 8)

(defparameter %sqlite::+shm-shared+ 4)

(defparameter %sqlite::+shm-unlock+ 1)

(defparameter %sqlite::+source-id+
  "2022-02-22 18:58:40 40fa792d359f84c3b9e9d6623743e1a59826274e221df1bde8f47086968a1bab")

(defparameter %sqlite::+static+ nil)

(defparameter %sqlite::+status-malloc-count+ 9)

(defparameter %sqlite::+status-malloc-size+ 5)

(defparameter %sqlite::+status-memory-used+ 0)

(defparameter %sqlite::+status-pagecache-overflow+ 2)

(defparameter %sqlite::+status-pagecache-size+ 7)

(defparameter %sqlite::+status-pagecache-used+ 1)

(defparameter %sqlite::+status-parser-stack+ 6)

(defparameter %sqlite::+status-scratch-overflow+ 4)

(defparameter %sqlite::+status-scratch-size+ 8)

(defparameter %sqlite::+status-scratch-used+ 3)

(defparameter %sqlite::+stdcall+ nil)

(defparameter %sqlite::+stmtstatus-autoindex+ 3)

(defparameter %sqlite::+stmtstatus-filter-hit+ 8)

(defparameter %sqlite::+stmtstatus-filter-miss+ 7)

(defparameter %sqlite::+stmtstatus-fullscan-step+ 1)

(defparameter %sqlite::+stmtstatus-memused+ 99)

(defparameter %sqlite::+stmtstatus-reprepare+ 5)

(defparameter %sqlite::+stmtstatus-run+ 6)

(defparameter %sqlite::+stmtstatus-sort+ 2)

(defparameter %sqlite::+stmtstatus-vm-step+ 4)

(defparameter %sqlite::+subtype+ 1048576)

(defparameter %sqlite::+sync-dataonly+ 16)

(defparameter %sqlite::+sync-full+ 3)

(defparameter %sqlite::+sync-normal+ 2)

(defparameter %sqlite::+sysapi+ nil)

(defparameter %sqlite::+testctrl-always+ 13)

(defparameter %sqlite::+testctrl-assert+ 12)

(defparameter %sqlite::+testctrl-benign-malloc-hooks+ 10)

(defparameter %sqlite::+testctrl-bitvec-test+ 8)

(defparameter %sqlite::+testctrl-byteorder+ 22)

(defparameter %sqlite::+testctrl-explain-stmt+ 19)

(defparameter %sqlite::+testctrl-extra-schema-checks+ 29)

(defparameter %sqlite::+testctrl-fault-install+ 9)

(defparameter %sqlite::+testctrl-first+ 5)

(defparameter %sqlite::+testctrl-imposter+ 25)

(defparameter %sqlite::+testctrl-internal-functions+ 17)

(defparameter %sqlite::+testctrl-isinit+ 23)

(defparameter %sqlite::+testctrl-iskeyword+ 16)

(defparameter %sqlite::+testctrl-last+ 33)

(defparameter %sqlite::+testctrl-localtime-fault+ 18)

(defparameter %sqlite::+testctrl-logest+ 33)

(defparameter %sqlite::+testctrl-never-corrupt+ 20)

(defparameter %sqlite::+testctrl-once-reset-threshold+ 19)

(defparameter %sqlite::+testctrl-optimizations+ 15)

(defparameter %sqlite::+testctrl-parser-coverage+ 26)

(defparameter %sqlite::+testctrl-pending-byte+ 11)

(defparameter %sqlite::+testctrl-prng-reset+ 7)

(defparameter %sqlite::+testctrl-prng-restore+ 6)

(defparameter %sqlite::+testctrl-prng-save+ 5)

(defparameter %sqlite::+testctrl-prng-seed+ 28)

(defparameter %sqlite::+testctrl-reserve+ 14)

(defparameter %sqlite::+testctrl-result-intreal+ 27)

(defparameter %sqlite::+testctrl-scratchmalloc+ 17)

(defparameter %sqlite::+testctrl-seek-count+ 30)

(defparameter %sqlite::+testctrl-sorter-mmap+ 24)

(defparameter %sqlite::+testctrl-traceflags+ 31)

(defparameter %sqlite::+testctrl-tune+ 32)

(defparameter %sqlite::+testctrl-vdbe-coverage+ 21)

(defparameter %sqlite::+text+ 3)

(defparameter %sqlite::+toobig+ 18)

(defparameter %sqlite::+trace-close+ 8)

(defparameter %sqlite::+trace-profile+ 2)

(defparameter %sqlite::+trace-row+ 4)

(defparameter %sqlite::+trace-stmt+ 1)

(defparameter %sqlite::+transaction+ 22)

(defparameter %sqlite::+transient+ nil)

(defparameter %sqlite::+txn-none+ 0)

(defparameter %sqlite::+txn-read+ 1)

(defparameter %sqlite::+txn-write+ 2)

(defparameter %sqlite::+update+ 23)

(defparameter %sqlite::+utf16+ 4)

(defparameter %sqlite::+utf16be+ 3)

(defparameter %sqlite::+utf16le+ 2)

(defparameter %sqlite::+utf16-aligned+ 8)

(defparameter %sqlite::+utf8+ 1)

(defparameter %sqlite::+version+ "3.38.0")

(defparameter %sqlite::+version-number+ 3038000)

(defparameter %sqlite::+vtab-constraint-support+ 1)

(defparameter %sqlite::+vtab-directonly+ 3)

(defparameter %sqlite::+vtab-innocuous+ 2)

(defparameter %sqlite::+warning+ 28)

(defparameter %sqlite::+warning-autoindex+ 284)

(defparameter %sqlite::+win32-data-directory-type+ 1)

(defparameter %sqlite::+win32-temp-directory-type+ 2)

(cffi:defcstruct (%sqlite::context :size 0))

(cffi:defctype %sqlite::context (:struct %sqlite::context))

(cffi:defcfun ("sqlite3_aggregate_context" %sqlite::aggregate-context)
    (:pointer :void)
  (%sqlite::arg0 (:pointer %sqlite::context))
  (%sqlite::n-bytes :int))

(cffi:defcfun ("sqlite3_aggregate_count" %sqlite::aggregate-count)
    :int
  (%sqlite::arg0 (:pointer %sqlite::context)))

(cffi:defcfun ("sqlite3_auto_extension" %sqlite::auto-extension)
    :int
  (%sqlite::x-entry-point (:pointer :void)))

(cffi:defcstruct (%sqlite::sqlite3 :size 0))

(cffi:defctype %sqlite::sqlite3 (:struct %sqlite::sqlite3))

(cffi:defcfun ("sqlite3_autovacuum_pages" %sqlite::autovacuum-pages)
    :int
  (%sqlite::db (:pointer %sqlite::sqlite3))
  (%sqlite::arg1 (:pointer :void))
  (%sqlite::arg2 (:pointer :void))
  (%sqlite::arg3 (:pointer :void)))

(cffi:defcstruct (%sqlite::backup :size 0))

(cffi:defctype %sqlite::backup (:struct %sqlite::backup))

(cffi:defcfun ("sqlite3_backup_finish" %sqlite::backup-finish)
    :int
  (%sqlite::p (:pointer %sqlite::backup)))

(cffi:defcfun ("sqlite3_backup_init" %sqlite::backup-init)
    (:pointer %sqlite::backup)
  (%sqlite::p-dest (:pointer %sqlite::sqlite3))
  (%sqlite::z-dest-name :string)
  (%sqlite::p-source (:pointer %sqlite::sqlite3))
  (%sqlite::z-source-name :string))

(cffi:defcfun ("sqlite3_backup_pagecount" %sqlite::backup-pagecount)
    :int
  (%sqlite::p (:pointer %sqlite::backup)))

(cffi:defcfun ("sqlite3_backup_remaining" %sqlite::backup-remaining)
    :int
  (%sqlite::p (:pointer %sqlite::backup)))

(cffi:defcfun ("sqlite3_backup_step" %sqlite::backup-step)
    :int
  (%sqlite::p (:pointer %sqlite::backup))
  (%sqlite::n-page :int))

(cffi:defcstruct (%sqlite::stmt :size 0))

(cffi:defctype %sqlite::stmt (:struct %sqlite::stmt))

(cffi:defcfun ("sqlite3_bind_blob" %sqlite::bind-blob)
    :int
  (%sqlite::arg0 (:pointer %sqlite::stmt))
  (%sqlite::arg1 :int)
  (%sqlite::arg2 (:pointer :void))
  (%sqlite::n :int)
  (%sqlite::arg4 (:pointer :void)))

(cffi:defctype %sqlite::uint64 :unsigned-long-long)

(cffi:defcfun ("sqlite3_bind_blob64" %sqlite::bind-blob64)
    :int
  (%sqlite::arg0 (:pointer %sqlite::stmt))
  (%sqlite::arg1 :int)
  (%sqlite::arg2 (:pointer :void))
  (%sqlite::arg3 %sqlite::uint64)
  (%sqlite::arg4 (:pointer :void)))

(cffi:defcfun ("sqlite3_bind_double" %sqlite::bind-double)
    :int
  (%sqlite::arg0 (:pointer %sqlite::stmt))
  (%sqlite::arg1 :int)
  (%sqlite::arg2 :double))

(cffi:defcfun ("sqlite3_bind_int" %sqlite::bind-int)
    :int
  (%sqlite::arg0 (:pointer %sqlite::stmt))
  (%sqlite::arg1 :int)
  (%sqlite::arg2 :int))

(cffi:defctype %sqlite::int64 :long-long)

(cffi:defcfun ("sqlite3_bind_int64" %sqlite::bind-int64)
    :int
  (%sqlite::arg0 (:pointer %sqlite::stmt))
  (%sqlite::arg1 :int)
  (%sqlite::arg2 %sqlite::int64))

(cffi:defcfun ("sqlite3_bind_null" %sqlite::bind-null)
    :int
  (%sqlite::arg0 (:pointer %sqlite::stmt))
  (%sqlite::arg1 :int))

(cffi:defcfun ("sqlite3_bind_parameter_count" %sqlite::bind-parameter-count)
    :int
  (%sqlite::arg0 (:pointer %sqlite::stmt)))

(cffi:defcfun ("sqlite3_bind_parameter_index" %sqlite::bind-parameter-index)
    :int
  (%sqlite::arg0 (:pointer %sqlite::stmt))
  (%sqlite::z-name :string))

(cffi:defcfun ("sqlite3_bind_parameter_name" %sqlite::bind-parameter-name)
    :string
  (%sqlite::arg0 (:pointer %sqlite::stmt))
  (%sqlite::arg1 :int))

(cffi:defcfun ("sqlite3_bind_pointer" %sqlite::bind-pointer)
    :int
  (%sqlite::arg0 (:pointer %sqlite::stmt))
  (%sqlite::arg1 :int)
  (%sqlite::arg2 (:pointer :void))
  (%sqlite::arg3 :string)
  (%sqlite::arg4 (:pointer :void)))

(cffi:defcfun ("sqlite3_bind_text" %sqlite::bind-text)
    :int
  (%sqlite::arg0 (:pointer %sqlite::stmt))
  (%sqlite::arg1 :int)
  (%sqlite::arg2 :string)
  (%sqlite::arg3 :int)
  (%sqlite::arg4 (:pointer :void)))

(cffi:defcfun ("sqlite3_bind_text16" %sqlite::bind-text16)
    :int
  (%sqlite::arg0 (:pointer %sqlite::stmt))
  (%sqlite::arg1 :int)
  (%sqlite::arg2 (:pointer :void))
  (%sqlite::arg3 :int)
  (%sqlite::arg4 (:pointer :void)))

(cffi:defcfun ("sqlite3_bind_text64" %sqlite::bind-text64)
    :int
  (%sqlite::arg0 (:pointer %sqlite::stmt))
  (%sqlite::arg1 :int)
  (%sqlite::arg2 :string)
  (%sqlite::arg3 %sqlite::uint64)
  (%sqlite::arg4 (:pointer :void))
  (%sqlite::encoding :unsigned-char))

(cffi:defcstruct (%sqlite::value :size 0))

(cffi:defctype %sqlite::value (:struct %sqlite::value))

(cffi:defcfun ("sqlite3_bind_value" %sqlite::bind-value)
    :int
  (%sqlite::arg0 (:pointer %sqlite::stmt))
  (%sqlite::arg1 :int)
  (%sqlite::arg2 (:pointer %sqlite::value)))

(cffi:defcfun ("sqlite3_bind_zeroblob" %sqlite::bind-zeroblob)
    :int
  (%sqlite::arg0 (:pointer %sqlite::stmt))
  (%sqlite::arg1 :int)
  (%sqlite::n :int))

(cffi:defcfun ("sqlite3_bind_zeroblob64" %sqlite::bind-zeroblob64)
    :int
  (%sqlite::arg0 (:pointer %sqlite::stmt))
  (%sqlite::arg1 :int)
  (%sqlite::arg2 %sqlite::uint64))

(cffi:defcstruct (%sqlite::blob :size 0))

(cffi:defctype %sqlite::blob (:struct %sqlite::blob))

(cffi:defcfun ("sqlite3_blob_bytes" %sqlite::blob-bytes)
    :int
  (%sqlite::arg0 (:pointer %sqlite::blob)))

(cffi:defcfun ("sqlite3_blob_close" %sqlite::blob-close)
    :int
  (%sqlite::arg0 (:pointer %sqlite::blob)))

(cffi:defcfun ("sqlite3_blob_open" %sqlite::blob-open)
    :int
  (%sqlite::arg0 (:pointer %sqlite::sqlite3))
  (%sqlite::z-db :string)
  (%sqlite::z-table :string)
  (%sqlite::z-column :string)
  (%sqlite::i-row %sqlite::int64)
  (%sqlite::flags :int)
  (%sqlite::pp-blob (:pointer (:pointer %sqlite::blob))))

(cffi:defcfun ("sqlite3_blob_read" %sqlite::blob-read)
    :int
  (%sqlite::arg0 (:pointer %sqlite::blob))
  (%sqlite::z (:pointer :void))
  (%sqlite::n :int)
  (%sqlite::i-offset :int))

(cffi:defcfun ("sqlite3_blob_reopen" %sqlite::blob-reopen)
    :int
  (%sqlite::arg0 (:pointer %sqlite::blob))
  (%sqlite::arg1 %sqlite::int64))

(cffi:defcfun ("sqlite3_blob_write" %sqlite::blob-write)
    :int
  (%sqlite::arg0 (:pointer %sqlite::blob))
  (%sqlite::z (:pointer :void))
  (%sqlite::n :int)
  (%sqlite::i-offset :int))

(cffi:defcfun ("sqlite3_busy_handler" %sqlite::busy-handler)
    :int
  (%sqlite::arg0 (:pointer %sqlite::sqlite3))
  (%sqlite::arg1 (:pointer :void))
  (%sqlite::arg2 (:pointer :void)))

(cffi:defcfun ("sqlite3_busy_timeout" %sqlite::busy-timeout)
    :int
  (%sqlite::arg0 (:pointer %sqlite::sqlite3))
  (%sqlite::ms :int))

(cffi:defcfun ("sqlite3_cancel_auto_extension" %sqlite::cancel-auto-extension)
    :int
  (%sqlite::x-entry-point (:pointer :void)))

(cffi:defcfun ("sqlite3_changes" %sqlite::changes)
    :int
  (%sqlite::arg0 (:pointer %sqlite::sqlite3)))

(cffi:defcfun ("sqlite3_changes64" %sqlite::changes64)
    %sqlite::int64
  (%sqlite::arg0 (:pointer %sqlite::sqlite3)))

(cffi:defcfun ("sqlite3_clear_bindings" %sqlite::clear-bindings)
    :int
  (%sqlite::arg0 (:pointer %sqlite::stmt)))

(cffi:defcfun ("sqlite3_close" %sqlite::close)
    :int
  (%sqlite::arg0 (:pointer %sqlite::sqlite3)))

(cffi:defcfun ("sqlite3_close_v2" %sqlite::close-v2)
    :int
  (%sqlite::arg0 (:pointer %sqlite::sqlite3)))

(cffi:defcfun ("sqlite3_collation_needed" %sqlite::collation-needed)
    :int
  (%sqlite::arg0 (:pointer %sqlite::sqlite3))
  (%sqlite::arg1 (:pointer :void))
  (%sqlite::arg2 (:pointer :void)))

(cffi:defcfun ("sqlite3_collation_needed16" %sqlite::collation-needed16)
    :int
  (%sqlite::arg0 (:pointer %sqlite::sqlite3))
  (%sqlite::arg1 (:pointer :void))
  (%sqlite::arg2 (:pointer :void)))

(cffi:defcfun ("sqlite3_column_blob" %sqlite::column-blob)
    (:pointer :void)
  (%sqlite::arg0 (:pointer %sqlite::stmt))
  (%sqlite::i-col :int))

(cffi:defcfun ("sqlite3_column_bytes" %sqlite::column-bytes)
    :int
  (%sqlite::arg0 (:pointer %sqlite::stmt))
  (%sqlite::i-col :int))

(cffi:defcfun ("sqlite3_column_bytes16" %sqlite::column-bytes16)
    :int
  (%sqlite::arg0 (:pointer %sqlite::stmt))
  (%sqlite::i-col :int))

(cffi:defcfun ("sqlite3_column_count" %sqlite::column-count)
    :int
  (%sqlite::p-stmt (:pointer %sqlite::stmt)))

(cffi:defcfun ("sqlite3_column_database_name" %sqlite::column-database-name)
    :string
  (%sqlite::arg0 (:pointer %sqlite::stmt))
  (%sqlite::arg1 :int))

(cffi:defcfun ("sqlite3_column_database_name16" %sqlite::column-database-name16)
    (:pointer :void)
  (%sqlite::arg0 (:pointer %sqlite::stmt))
  (%sqlite::arg1 :int))

(cffi:defcfun ("sqlite3_column_decltype" %sqlite::column-decltype)
    :string
  (%sqlite::arg0 (:pointer %sqlite::stmt))
  (%sqlite::arg1 :int))

(cffi:defcfun ("sqlite3_column_decltype16" %sqlite::column-decltype16)
    (:pointer :void)
  (%sqlite::arg0 (:pointer %sqlite::stmt))
  (%sqlite::arg1 :int))

(cffi:defcfun ("sqlite3_column_double" %sqlite::column-double)
    :double
  (%sqlite::arg0 (:pointer %sqlite::stmt))
  (%sqlite::i-col :int))

(cffi:defcfun ("sqlite3_column_int" %sqlite::column-int)
    :int
  (%sqlite::arg0 (:pointer %sqlite::stmt))
  (%sqlite::i-col :int))

(cffi:defcfun ("sqlite3_column_int64" %sqlite::column-int64)
    %sqlite::int64
  (%sqlite::arg0 (:pointer %sqlite::stmt))
  (%sqlite::i-col :int))

(cffi:defcfun ("sqlite3_column_name" %sqlite::column-name)
    :string
  (%sqlite::arg0 (:pointer %sqlite::stmt))
  (%sqlite::n :int))

(cffi:defcfun ("sqlite3_column_name16" %sqlite::column-name16)
    (:pointer :void)
  (%sqlite::arg0 (:pointer %sqlite::stmt))
  (%sqlite::n :int))

(cffi:defcfun ("sqlite3_column_origin_name" %sqlite::column-origin-name)
    :string
  (%sqlite::arg0 (:pointer %sqlite::stmt))
  (%sqlite::arg1 :int))

(cffi:defcfun ("sqlite3_column_origin_name16" %sqlite::column-origin-name16)
    (:pointer :void)
  (%sqlite::arg0 (:pointer %sqlite::stmt))
  (%sqlite::arg1 :int))

(cffi:defcfun ("sqlite3_column_table_name" %sqlite::column-table-name)
    :string
  (%sqlite::arg0 (:pointer %sqlite::stmt))
  (%sqlite::arg1 :int))

(cffi:defcfun ("sqlite3_column_table_name16" %sqlite::column-table-name16)
    (:pointer :void)
  (%sqlite::arg0 (:pointer %sqlite::stmt))
  (%sqlite::arg1 :int))

(cffi:defcfun ("sqlite3_column_text" %sqlite::column-text)
    (:pointer :unsigned-char)
  (%sqlite::arg0 (:pointer %sqlite::stmt))
  (%sqlite::i-col :int))

(cffi:defcfun ("sqlite3_column_text16" %sqlite::column-text16)
    (:pointer :void)
  (%sqlite::arg0 (:pointer %sqlite::stmt))
  (%sqlite::i-col :int))

(cffi:defcfun ("sqlite3_column_type" %sqlite::column-type)
    :int
  (%sqlite::arg0 (:pointer %sqlite::stmt))
  (%sqlite::i-col :int))

(cffi:defcfun ("sqlite3_column_value" %sqlite::column-value)
    (:pointer %sqlite::value)
  (%sqlite::arg0 (:pointer %sqlite::stmt))
  (%sqlite::i-col :int))

(cffi:defcfun ("sqlite3_commit_hook" %sqlite::commit-hook)
    (:pointer :void)
  (%sqlite::arg0 (:pointer %sqlite::sqlite3))
  (%sqlite::arg1 (:pointer :void))
  (%sqlite::arg2 (:pointer :void)))

(cffi:defcfun ("sqlite3_compileoption_get" %sqlite::compileoption-get)
    :string
  (%sqlite::n :int))

(cffi:defcfun ("sqlite3_compileoption_used" %sqlite::compileoption-used)
    :int
  (%sqlite::z-opt-name :string))

(cffi:defcfun ("sqlite3_complete" %sqlite::complete)
    :int
  (%sqlite::sql :string))

(cffi:defcfun ("sqlite3_complete16" %sqlite::complete16)
    :int
  (%sqlite::sql (:pointer :void)))

(cffi:defcfun ("sqlite3_config" %sqlite::config)
    :int
  (%sqlite::arg0 :int)
  &rest)

(cffi:defcfun ("sqlite3_context_db_handle" %sqlite::context-db-handle)
    (:pointer %sqlite::sqlite3)
  (%sqlite::arg0 (:pointer %sqlite::context)))

(cffi:defcfun ("sqlite3_create_collation" %sqlite::create-collation)
    :int
  (%sqlite::arg0 (:pointer %sqlite::sqlite3))
  (%sqlite::z-name :string)
  (%sqlite::e-text-rep :int)
  (%sqlite::p-arg (:pointer :void))
  (%sqlite::x-compare (:pointer :void)))

(cffi:defcfun ("sqlite3_create_collation16" %sqlite::create-collation16)
    :int
  (%sqlite::arg0 (:pointer %sqlite::sqlite3))
  (%sqlite::z-name (:pointer :void))
  (%sqlite::e-text-rep :int)
  (%sqlite::p-arg (:pointer :void))
  (%sqlite::x-compare (:pointer :void)))

(cffi:defcfun ("sqlite3_create_collation_v2" %sqlite::create-collation-v2)
    :int
  (%sqlite::arg0 (:pointer %sqlite::sqlite3))
  (%sqlite::z-name :string)
  (%sqlite::e-text-rep :int)
  (%sqlite::p-arg (:pointer :void))
  (%sqlite::x-compare (:pointer :void))
  (%sqlite::x-destroy (:pointer :void)))

(cffi:defcfun ("sqlite3_create_filename" %sqlite::create-filename)
    :string
  (%sqlite::z-database :string)
  (%sqlite::z-journal :string)
  (%sqlite::z-wal :string)
  (%sqlite::n-param :int)
  (%sqlite::az-param :string))

(cffi:defcfun ("sqlite3_create_function" %sqlite::create-function)
    :int
  (%sqlite::db (:pointer %sqlite::sqlite3))
  (%sqlite::z-function-name :string)
  (%sqlite::n-arg :int)
  (%sqlite::e-text-rep :int)
  (%sqlite::p-app (:pointer :void))
  (%sqlite::x-func (:pointer :void))
  (%sqlite::x-step (:pointer :void))
  (%sqlite::x-final (:pointer :void)))

(cffi:defcfun ("sqlite3_create_function16" %sqlite::create-function16)
    :int
  (%sqlite::db (:pointer %sqlite::sqlite3))
  (%sqlite::z-function-name (:pointer :void))
  (%sqlite::n-arg :int)
  (%sqlite::e-text-rep :int)
  (%sqlite::p-app (:pointer :void))
  (%sqlite::x-func (:pointer :void))
  (%sqlite::x-step (:pointer :void))
  (%sqlite::x-final (:pointer :void)))

(cffi:defcfun ("sqlite3_create_function_v2" %sqlite::create-function-v2)
    :int
  (%sqlite::db (:pointer %sqlite::sqlite3))
  (%sqlite::z-function-name :string)
  (%sqlite::n-arg :int)
  (%sqlite::e-text-rep :int)
  (%sqlite::p-app (:pointer :void))
  (%sqlite::x-func (:pointer :void))
  (%sqlite::x-step (:pointer :void))
  (%sqlite::x-final (:pointer :void))
  (%sqlite::x-destroy (:pointer :void)))

(cffi:defcstruct (%sqlite::module :size 192)
  (%sqlite::i-version :int :offset 0)
  (%sqlite::x-create (:pointer :void) :offset 8)
  (%sqlite::x-connect (:pointer :void) :offset 16)
  (%sqlite::x-best-index (:pointer :void) :offset 24)
  (%sqlite::x-disconnect (:pointer :void) :offset 32)
  (%sqlite::x-destroy (:pointer :void) :offset 40)
  (%sqlite::x-open (:pointer :void) :offset 48)
  (%sqlite::x-close (:pointer :void) :offset 56)
  (%sqlite::x-filter (:pointer :void) :offset 64)
  (%sqlite::x-next (:pointer :void) :offset 72)
  (%sqlite::x-eof (:pointer :void) :offset 80)
  (%sqlite::x-column (:pointer :void) :offset 88)
  (%sqlite::x-rowid (:pointer :void) :offset 96)
  (%sqlite::x-update (:pointer :void) :offset 104)
  (%sqlite::x-begin (:pointer :void) :offset 112)
  (%sqlite::x-sync (:pointer :void) :offset 120)
  (%sqlite::x-commit (:pointer :void) :offset 128)
  (%sqlite::x-rollback (:pointer :void) :offset 136)
  (%sqlite::x-find-function (:pointer :void) :offset 144)
  (%sqlite::x-rename (:pointer :void) :offset 152)
  (%sqlite::x-savepoint (:pointer :void) :offset 160)
  (%sqlite::x-release (:pointer :void) :offset 168)
  (%sqlite::x-rollback-to (:pointer :void) :offset 176)
  (%sqlite::x-shadow-name (:pointer :void) :offset 184))

(cffi:defctype %sqlite::module (:struct %sqlite::module))

(cffi:defcfun ("sqlite3_create_module" %sqlite::create-module)
    :int
  (%sqlite::db (:pointer %sqlite::sqlite3))
  (%sqlite::z-name :string)
  (%sqlite::p (:pointer %sqlite::module))
  (%sqlite::p-client-data (:pointer :void)))

(cffi:defcfun ("sqlite3_create_module_v2" %sqlite::create-module-v2)
    :int
  (%sqlite::db (:pointer %sqlite::sqlite3))
  (%sqlite::z-name :string)
  (%sqlite::p (:pointer %sqlite::module))
  (%sqlite::p-client-data (:pointer :void))
  (%sqlite::x-destroy (:pointer :void)))

(cffi:defcfun ("sqlite3_create_window_function" %sqlite::create-window-function)
    :int
  (%sqlite::db (:pointer %sqlite::sqlite3))
  (%sqlite::z-function-name :string)
  (%sqlite::n-arg :int)
  (%sqlite::e-text-rep :int)
  (%sqlite::p-app (:pointer :void))
  (%sqlite::x-step (:pointer :void))
  (%sqlite::x-final (:pointer :void))
  (%sqlite::x-value (:pointer :void))
  (%sqlite::x-inverse (:pointer :void))
  (%sqlite::x-destroy (:pointer :void)))

(cffi:defcfun ("sqlite3_data_count" %sqlite::data-count)
    :int
  (%sqlite::p-stmt (:pointer %sqlite::stmt)))

(cffi:defcstruct (%sqlite::io-methods :size 152)
  (%sqlite::i-version :int :offset 0)
  (%sqlite::x-close (:pointer :void) :offset 8)
  (%sqlite::x-read (:pointer :void) :offset 16)
  (%sqlite::x-write (:pointer :void) :offset 24)
  (%sqlite::x-truncate (:pointer :void) :offset 32)
  (%sqlite::x-sync (:pointer :void) :offset 40)
  (%sqlite::x-file-size (:pointer :void) :offset 48)
  (%sqlite::x-lock (:pointer :void) :offset 56)
  (%sqlite::x-unlock (:pointer :void) :offset 64)
  (%sqlite::x-check-reserved-lock (:pointer :void) :offset 72)
  (%sqlite::x-file-control (:pointer :void) :offset 80)
  (%sqlite::x-sector-size (:pointer :void) :offset 88)
  (%sqlite::x-device-characteristics (:pointer :void) :offset 96)
  (%sqlite::x-shm-map (:pointer :void) :offset 104)
  (%sqlite::x-shm-lock (:pointer :void) :offset 112)
  (%sqlite::x-shm-barrier (:pointer :void) :offset 120)
  (%sqlite::x-shm-unmap (:pointer :void) :offset 128)
  (%sqlite::x-fetch (:pointer :void) :offset 136)
  (%sqlite::x-unfetch (:pointer :void) :offset 144))

(cffi:defcstruct (%sqlite::file :size 8)
  (%sqlite::p-methods (:pointer (:struct %sqlite::io-methods)) :offset 0))

(cffi:defctype %sqlite::file (:struct %sqlite::file))

(cffi:defcfun ("sqlite3_database_file_object" %sqlite::database-file-object)
    (:pointer %sqlite::file)
  (%sqlite::arg0 :string))

(cffi:defcfun ("sqlite3_db_cacheflush" %sqlite::db-cacheflush)
    :int
  (%sqlite::arg0 (:pointer %sqlite::sqlite3)))

(cffi:defcfun ("sqlite3_db_config" %sqlite::db-config)
    :int
  (%sqlite::arg0 (:pointer %sqlite::sqlite3))
  (%sqlite::op :int)
  &rest)

(cffi:defcfun ("sqlite3_db_filename" %sqlite::db-filename)
    :string
  (%sqlite::db (:pointer %sqlite::sqlite3))
  (%sqlite::z-db-name :string))

(cffi:defcfun ("sqlite3_db_handle" %sqlite::db-handle)
    (:pointer %sqlite::sqlite3)
  (%sqlite::arg0 (:pointer %sqlite::stmt)))

(cffi:defcstruct (%sqlite::mutex :size 0))

(cffi:defctype %sqlite::mutex (:struct %sqlite::mutex))

(cffi:defcfun ("sqlite3_db_mutex" %sqlite::db-mutex)
    (:pointer %sqlite::mutex)
  (%sqlite::arg0 (:pointer %sqlite::sqlite3)))

(cffi:defcfun ("sqlite3_db_readonly" %sqlite::db-readonly)
    :int
  (%sqlite::db (:pointer %sqlite::sqlite3))
  (%sqlite::z-db-name :string))

(cffi:defcfun ("sqlite3_db_release_memory" %sqlite::db-release-memory)
    :int
  (%sqlite::arg0 (:pointer %sqlite::sqlite3)))

(cffi:defcfun ("sqlite3_db_status" %sqlite::db-status)
    :int
  (%sqlite::arg0 (:pointer %sqlite::sqlite3))
  (%sqlite::op :int)
  (%sqlite::p-cur (:pointer :int))
  (%sqlite::p-hiwtr (:pointer :int))
  (%sqlite::reset-flg :int))

(cffi:defcfun ("sqlite3_declare_vtab" %sqlite::declare-vtab)
    :int
  (%sqlite::arg0 (:pointer %sqlite::sqlite3))
  (%sqlite::z-sql :string))

(cffi:defcfun ("sqlite3_deserialize" %sqlite::deserialize)
    :int
  (%sqlite::db (:pointer %sqlite::sqlite3))
  (%sqlite::z-schema :string)
  (%sqlite::p-data (:pointer :unsigned-char))
  (%sqlite::sz-db %sqlite::int64)
  (%sqlite::sz-buf %sqlite::int64)
  (%sqlite::m-flags :unsigned-int))

(cffi:defcfun ("sqlite3_drop_modules" %sqlite::drop-modules)
    :int
  (%sqlite::db (:pointer %sqlite::sqlite3))
  (%sqlite::az-keep :string))

(cffi:defcfun ("sqlite3_enable_load_extension" %sqlite::enable-load-extension)
    :int
  (%sqlite::db (:pointer %sqlite::sqlite3))
  (%sqlite::onoff :int))

(cffi:defcfun ("sqlite3_enable_shared_cache" %sqlite::enable-shared-cache)
    :int
  (%sqlite::arg0 :int))

(cffi:defcfun ("sqlite3_errcode" %sqlite::errcode)
    :int
  (%sqlite::db (:pointer %sqlite::sqlite3)))

(cffi:defcfun ("sqlite3_errmsg" %sqlite::errmsg)
    :string
  (%sqlite::arg0 (:pointer %sqlite::sqlite3)))

(cffi:defcfun ("sqlite3_errmsg16" %sqlite::errmsg16)
    (:pointer :void)
  (%sqlite::arg0 (:pointer %sqlite::sqlite3)))

(cffi:defcfun ("sqlite3_error_offset" %sqlite::error-offset)
    :int
  (%sqlite::db (:pointer %sqlite::sqlite3)))

(cffi:defcfun ("sqlite3_errstr" %sqlite::errstr)
    :string
  (%sqlite::arg0 :int))

(cffi:defcfun ("sqlite3_exec" %sqlite::exec)
    :int
  (%sqlite::arg0 (:pointer %sqlite::sqlite3))
  (%sqlite::sql :string)
  (%sqlite::callback (:pointer :void))
  (%sqlite::arg3 (:pointer :void))
  (%sqlite::errmsg :string))

(cffi:defcfun ("sqlite3_expanded_sql" %sqlite::expanded-sql)
    :string
  (%sqlite::p-stmt (:pointer %sqlite::stmt)))

(cffi:defcfun ("sqlite3_expired" %sqlite::expired)
    :int
  (%sqlite::arg0 (:pointer %sqlite::stmt)))

(cffi:defcfun ("sqlite3_extended_errcode" %sqlite::extended-errcode)
    :int
  (%sqlite::db (:pointer %sqlite::sqlite3)))

(cffi:defcfun ("sqlite3_extended_result_codes" %sqlite::extended-result-codes)
    :int
  (%sqlite::arg0 (:pointer %sqlite::sqlite3))
  (%sqlite::onoff :int))

(cffi:defcfun ("sqlite3_file_control" %sqlite::file-control)
    :int
  (%sqlite::arg0 (:pointer %sqlite::sqlite3))
  (%sqlite::z-db-name :string)
  (%sqlite::op :int)
  (%sqlite::arg3 (:pointer :void)))

(cffi:defcfun ("sqlite3_filename_database" %sqlite::filename-database)
    :string
  (%sqlite::arg0 :string))

(cffi:defcfun ("sqlite3_filename_journal" %sqlite::filename-journal)
    :string
  (%sqlite::arg0 :string))

(cffi:defcfun ("sqlite3_filename_wal" %sqlite::filename-wal)
    :string
  (%sqlite::arg0 :string))

(cffi:defcfun ("sqlite3_finalize" %sqlite::finalize)
    :int
  (%sqlite::p-stmt (:pointer %sqlite::stmt)))

(cffi:defcfun ("sqlite3_free" %sqlite::free)
    :void
  (%sqlite::arg0 (:pointer :void)))

(cffi:defcfun ("sqlite3_free_filename" %sqlite::free-filename)
    :void
  (%sqlite::arg0 :string))

(cffi:defcfun ("sqlite3_free_table" %sqlite::free-table)
    :void
  (%sqlite::result :string))

(cffi:defcfun ("sqlite3_get_autocommit" %sqlite::get-autocommit)
    :int
  (%sqlite::arg0 (:pointer %sqlite::sqlite3)))

(cffi:defcfun ("sqlite3_get_auxdata" %sqlite::get-auxdata)
    (:pointer :void)
  (%sqlite::arg0 (:pointer %sqlite::context))
  (%sqlite::n :int))

(cffi:defcfun ("sqlite3_get_table" %sqlite::get-table)
    :int
  (%sqlite::db (:pointer %sqlite::sqlite3))
  (%sqlite::z-sql :string)
  (%sqlite::paz-result :string)
  (%sqlite::pn-row (:pointer :int))
  (%sqlite::pn-column (:pointer :int))
  (%sqlite::pz-errmsg :string))

(cffi:defcfun ("sqlite3_global_recover" %sqlite::global-recover)
    :int)

(cffi:defcfun ("sqlite3_hard_heap_limit64" %sqlite::hard-heap-limit64)
    %sqlite::int64
  (%sqlite::n %sqlite::int64))

(cffi:defcfun ("sqlite3_initialize" %sqlite::initialize)
    :int)

(cffi:defcfun ("sqlite3_interrupt" %sqlite::interrupt)
    :void
  (%sqlite::arg0 (:pointer %sqlite::sqlite3)))

(cffi:defcfun ("sqlite3_keyword_check" %sqlite::keyword-check)
    :int
  (%sqlite::arg0 :string)
  (%sqlite::arg1 :int))

(cffi:defcfun ("sqlite3_keyword_count" %sqlite::keyword-count)
    :int)

(cffi:defcfun ("sqlite3_keyword_name" %sqlite::keyword-name)
    :int
  (%sqlite::arg0 :int)
  (%sqlite::arg1 :string)
  (%sqlite::arg2 (:pointer :int)))

(cffi:defcfun ("sqlite3_last_insert_rowid" %sqlite::last-insert-rowid)
    %sqlite::int64
  (%sqlite::arg0 (:pointer %sqlite::sqlite3)))

(cffi:defcfun ("sqlite3_libversion" %sqlite::libversion)
    :string)

(cffi:defcfun ("sqlite3_libversion_number" %sqlite::libversion-number)
    :int)

(cffi:defcfun ("sqlite3_limit" %sqlite::limit)
    :int
  (%sqlite::arg0 (:pointer %sqlite::sqlite3))
  (%sqlite::id :int)
  (%sqlite::new-val :int))

(cffi:defcfun ("sqlite3_load_extension" %sqlite::load-extension)
    :int
  (%sqlite::db (:pointer %sqlite::sqlite3))
  (%sqlite::z-file :string)
  (%sqlite::z-proc :string)
  (%sqlite::pz-err-msg :string))

(cffi:defcfun ("sqlite3_log" %sqlite::log)
    :void
  (%sqlite::i-err-code :int)
  (%sqlite::z-format :string)
  &rest)

(cffi:defcfun ("sqlite3_malloc" %sqlite::malloc)
    (:pointer :void)
  (%sqlite::arg0 :int))

(cffi:defcfun ("sqlite3_malloc64" %sqlite::malloc64)
    (:pointer :void)
  (%sqlite::arg0 %sqlite::uint64))

(cffi:defcfun ("sqlite3_memory_alarm" %sqlite::memory-alarm)
    :int
  (%sqlite::arg0 (:pointer :void))
  (%sqlite::arg1 (:pointer :void))
  (%sqlite::arg2 %sqlite::int64))

(cffi:defcfun ("sqlite3_memory_highwater" %sqlite::memory-highwater)
    %sqlite::int64
  (%sqlite::reset-flag :int))

(cffi:defcfun ("sqlite3_memory_used" %sqlite::memory-used)
    %sqlite::int64)

(cffi:defcfun ("sqlite3_mprintf" %sqlite::mprintf)
    :string
  (%sqlite::arg0 :string)
  &rest)

(cffi:defcfun ("sqlite3_msize" %sqlite::msize)
    %sqlite::uint64
  (%sqlite::arg0 (:pointer :void)))

(cffi:defcfun ("sqlite3_mutex_alloc" %sqlite::mutex-alloc)
    (:pointer %sqlite::mutex)
  (%sqlite::arg0 :int))

(cffi:defcfun ("sqlite3_mutex_enter" %sqlite::mutex-enter)
    :void
  (%sqlite::arg0 (:pointer %sqlite::mutex)))

(cffi:defcfun ("sqlite3_mutex_free" %sqlite::mutex-free)
    :void
  (%sqlite::arg0 (:pointer %sqlite::mutex)))

(cffi:defcfun ("sqlite3_mutex_held" %sqlite::mutex-held)
    :int
  (%sqlite::arg0 (:pointer %sqlite::mutex)))

(cffi:defcfun ("sqlite3_mutex_leave" %sqlite::mutex-leave)
    :void
  (%sqlite::arg0 (:pointer %sqlite::mutex)))

(cffi:defcfun ("sqlite3_mutex_notheld" %sqlite::mutex-notheld)
    :int
  (%sqlite::arg0 (:pointer %sqlite::mutex)))

(cffi:defcfun ("sqlite3_mutex_try" %sqlite::mutex-try)
    :int
  (%sqlite::arg0 (:pointer %sqlite::mutex)))

(cffi:defcfun ("sqlite3_next_stmt" %sqlite::next-stmt)
    (:pointer %sqlite::stmt)
  (%sqlite::p-db (:pointer %sqlite::sqlite3))
  (%sqlite::p-stmt (:pointer %sqlite::stmt)))

(cffi:defcfun ("sqlite3_open" %sqlite::open)
    :int
  (%sqlite::filename :string)
  (%sqlite::pp-db (:pointer (:pointer %sqlite::sqlite3))))

(cffi:defcfun ("sqlite3_open16" %sqlite::open16)
    :int
  (%sqlite::filename (:pointer :void))
  (%sqlite::pp-db (:pointer (:pointer %sqlite::sqlite3))))

(cffi:defcfun ("sqlite3_open_v2" %sqlite::open-v2)
    :int
  (%sqlite::filename :string)
  (%sqlite::pp-db (:pointer (:pointer %sqlite::sqlite3)))
  (%sqlite::flags :int)
  (%sqlite::z-vfs :string))

(cffi:defcfun ("sqlite3_os_end" %sqlite::os-end)
    :int)

(cffi:defcfun ("sqlite3_os_init" %sqlite::os-init)
    :int)

(cffi:defcfun ("sqlite3_overload_function" %sqlite::overload-function)
    :int
  (%sqlite::arg0 (:pointer %sqlite::sqlite3))
  (%sqlite::z-func-name :string)
  (%sqlite::n-arg :int))

(cffi:defcfun ("sqlite3_prepare" %sqlite::prepare)
    :int
  (%sqlite::db (:pointer %sqlite::sqlite3))
  (%sqlite::z-sql :string)
  (%sqlite::n-byte :int)
  (%sqlite::pp-stmt (:pointer (:pointer %sqlite::stmt)))
  (%sqlite::pz-tail :string))

(cffi:defcfun ("sqlite3_prepare16" %sqlite::prepare16)
    :int
  (%sqlite::db (:pointer %sqlite::sqlite3))
  (%sqlite::z-sql (:pointer :void))
  (%sqlite::n-byte :int)
  (%sqlite::pp-stmt (:pointer (:pointer %sqlite::stmt)))
  (%sqlite::pz-tail (:pointer (:pointer :void))))

(cffi:defcfun ("sqlite3_prepare16_v2" %sqlite::prepare16-v2)
    :int
  (%sqlite::db (:pointer %sqlite::sqlite3))
  (%sqlite::z-sql (:pointer :void))
  (%sqlite::n-byte :int)
  (%sqlite::pp-stmt (:pointer (:pointer %sqlite::stmt)))
  (%sqlite::pz-tail (:pointer (:pointer :void))))

(cffi:defcfun ("sqlite3_prepare16_v3" %sqlite::prepare16-v3)
    :int
  (%sqlite::db (:pointer %sqlite::sqlite3))
  (%sqlite::z-sql (:pointer :void))
  (%sqlite::n-byte :int)
  (%sqlite::prep-flags :unsigned-int)
  (%sqlite::pp-stmt (:pointer (:pointer %sqlite::stmt)))
  (%sqlite::pz-tail (:pointer (:pointer :void))))

(cffi:defcfun ("sqlite3_prepare_v2" %sqlite::prepare-v2)
    :int
  (%sqlite::db (:pointer %sqlite::sqlite3))
  (%sqlite::z-sql :string)
  (%sqlite::n-byte :int)
  (%sqlite::pp-stmt (:pointer (:pointer %sqlite::stmt)))
  (%sqlite::pz-tail :string))

(cffi:defcfun ("sqlite3_prepare_v3" %sqlite::prepare-v3)
    :int
  (%sqlite::db (:pointer %sqlite::sqlite3))
  (%sqlite::z-sql :string)
  (%sqlite::n-byte :int)
  (%sqlite::prep-flags :unsigned-int)
  (%sqlite::pp-stmt (:pointer (:pointer %sqlite::stmt)))
  (%sqlite::pz-tail :string))

(cffi:defcfun ("sqlite3_profile" %sqlite::profile)
    (:pointer :void)
  (%sqlite::arg0 (:pointer %sqlite::sqlite3))
  (%sqlite::x-profile (:pointer :void))
  (%sqlite::arg2 (:pointer :void)))

(cffi:defcfun ("sqlite3_progress_handler" %sqlite::progress-handler)
    :void
  (%sqlite::arg0 (:pointer %sqlite::sqlite3))
  (%sqlite::arg1 :int)
  (%sqlite::arg2 (:pointer :void))
  (%sqlite::arg3 (:pointer :void)))

(cffi:defcfun ("sqlite3_randomness" %sqlite::randomness)
    :void
  (%sqlite::n :int)
  (%sqlite::p (:pointer :void)))

(cffi:defcfun ("sqlite3_realloc" %sqlite::realloc)
    (:pointer :void)
  (%sqlite::arg0 (:pointer :void))
  (%sqlite::arg1 :int))

(cffi:defcfun ("sqlite3_realloc64" %sqlite::realloc64)
    (:pointer :void)
  (%sqlite::arg0 (:pointer :void))
  (%sqlite::arg1 %sqlite::uint64))

(cffi:defcfun ("sqlite3_release_memory" %sqlite::release-memory)
    :int
  (%sqlite::arg0 :int))

(cffi:defcfun ("sqlite3_reset" %sqlite::reset)
    :int
  (%sqlite::p-stmt (:pointer %sqlite::stmt)))

(cffi:defcfun ("sqlite3_reset_auto_extension" %sqlite::reset-auto-extension)
    :void)

(cffi:defcfun ("sqlite3_result_blob" %sqlite::result-blob)
    :void
  (%sqlite::arg0 (:pointer %sqlite::context))
  (%sqlite::arg1 (:pointer :void))
  (%sqlite::arg2 :int)
  (%sqlite::arg3 (:pointer :void)))

(cffi:defcfun ("sqlite3_result_blob64" %sqlite::result-blob64)
    :void
  (%sqlite::arg0 (:pointer %sqlite::context))
  (%sqlite::arg1 (:pointer :void))
  (%sqlite::arg2 %sqlite::uint64)
  (%sqlite::arg3 (:pointer :void)))

(cffi:defcfun ("sqlite3_result_double" %sqlite::result-double)
    :void
  (%sqlite::arg0 (:pointer %sqlite::context))
  (%sqlite::arg1 :double))

(cffi:defcfun ("sqlite3_result_error" %sqlite::result-error)
    :void
  (%sqlite::arg0 (:pointer %sqlite::context))
  (%sqlite::arg1 :string)
  (%sqlite::arg2 :int))

(cffi:defcfun ("sqlite3_result_error16" %sqlite::result-error16)
    :void
  (%sqlite::arg0 (:pointer %sqlite::context))
  (%sqlite::arg1 (:pointer :void))
  (%sqlite::arg2 :int))

(cffi:defcfun ("sqlite3_result_error_code" %sqlite::result-error-code)
    :void
  (%sqlite::arg0 (:pointer %sqlite::context))
  (%sqlite::arg1 :int))

(cffi:defcfun ("sqlite3_result_error_nomem" %sqlite::result-error-nomem)
    :void
  (%sqlite::arg0 (:pointer %sqlite::context)))

(cffi:defcfun ("sqlite3_result_error_toobig" %sqlite::result-error-toobig)
    :void
  (%sqlite::arg0 (:pointer %sqlite::context)))

(cffi:defcfun ("sqlite3_result_int" %sqlite::result-int)
    :void
  (%sqlite::arg0 (:pointer %sqlite::context))
  (%sqlite::arg1 :int))

(cffi:defcfun ("sqlite3_result_int64" %sqlite::result-int64)
    :void
  (%sqlite::arg0 (:pointer %sqlite::context))
  (%sqlite::arg1 %sqlite::int64))

(cffi:defcfun ("sqlite3_result_null" %sqlite::result-null)
    :void
  (%sqlite::arg0 (:pointer %sqlite::context)))

(cffi:defcfun ("sqlite3_result_pointer" %sqlite::result-pointer)
    :void
  (%sqlite::arg0 (:pointer %sqlite::context))
  (%sqlite::arg1 (:pointer :void))
  (%sqlite::arg2 :string)
  (%sqlite::arg3 (:pointer :void)))

(cffi:defcfun ("sqlite3_result_subtype" %sqlite::result-subtype)
    :void
  (%sqlite::arg0 (:pointer %sqlite::context))
  (%sqlite::arg1 :unsigned-int))

(cffi:defcfun ("sqlite3_result_text" %sqlite::result-text)
    :void
  (%sqlite::arg0 (:pointer %sqlite::context))
  (%sqlite::arg1 :string)
  (%sqlite::arg2 :int)
  (%sqlite::arg3 (:pointer :void)))

(cffi:defcfun ("sqlite3_result_text16" %sqlite::result-text16)
    :void
  (%sqlite::arg0 (:pointer %sqlite::context))
  (%sqlite::arg1 (:pointer :void))
  (%sqlite::arg2 :int)
  (%sqlite::arg3 (:pointer :void)))

(cffi:defcfun ("sqlite3_result_text16be" %sqlite::result-text16be)
    :void
  (%sqlite::arg0 (:pointer %sqlite::context))
  (%sqlite::arg1 (:pointer :void))
  (%sqlite::arg2 :int)
  (%sqlite::arg3 (:pointer :void)))

(cffi:defcfun ("sqlite3_result_text16le" %sqlite::result-text16le)
    :void
  (%sqlite::arg0 (:pointer %sqlite::context))
  (%sqlite::arg1 (:pointer :void))
  (%sqlite::arg2 :int)
  (%sqlite::arg3 (:pointer :void)))

(cffi:defcfun ("sqlite3_result_text64" %sqlite::result-text64)
    :void
  (%sqlite::arg0 (:pointer %sqlite::context))
  (%sqlite::arg1 :string)
  (%sqlite::arg2 %sqlite::uint64)
  (%sqlite::arg3 (:pointer :void))
  (%sqlite::encoding :unsigned-char))

(cffi:defcfun ("sqlite3_result_value" %sqlite::result-value)
    :void
  (%sqlite::arg0 (:pointer %sqlite::context))
  (%sqlite::arg1 (:pointer %sqlite::value)))

(cffi:defcfun ("sqlite3_result_zeroblob" %sqlite::result-zeroblob)
    :void
  (%sqlite::arg0 (:pointer %sqlite::context))
  (%sqlite::n :int))

(cffi:defcfun ("sqlite3_result_zeroblob64" %sqlite::result-zeroblob64)
    :int
  (%sqlite::arg0 (:pointer %sqlite::context))
  (%sqlite::n %sqlite::uint64))

(cffi:defcfun ("sqlite3_rollback_hook" %sqlite::rollback-hook)
    (:pointer :void)
  (%sqlite::arg0 (:pointer %sqlite::sqlite3))
  (%sqlite::arg1 (:pointer :void))
  (%sqlite::arg2 (:pointer :void)))

(cffi:defcfun ("sqlite3_rtree_geometry_callback"
               %sqlite::rtree-geometry-callback)
    :int
  (%sqlite::db (:pointer %sqlite::sqlite3))
  (%sqlite::z-geom :string)
  (%sqlite::x-geom (:pointer :void))
  (%sqlite::p-context (:pointer :void)))

(cffi:defcfun ("sqlite3_rtree_query_callback" %sqlite::rtree-query-callback)
    :int
  (%sqlite::db (:pointer %sqlite::sqlite3))
  (%sqlite::z-query-func :string)
  (%sqlite::x-query-func (:pointer :void))
  (%sqlite::p-context (:pointer :void))
  (%sqlite::x-destructor (:pointer :void)))

(cffi:defcfun ("sqlite3_serialize" %sqlite::serialize)
    (:pointer :unsigned-char)
  (%sqlite::db (:pointer %sqlite::sqlite3))
  (%sqlite::z-schema :string)
  (%sqlite::pi-size (:pointer %sqlite::int64))
  (%sqlite::m-flags :unsigned-int))

(cffi:defcfun ("sqlite3_set_authorizer" %sqlite::set-authorizer)
    :int
  (%sqlite::arg0 (:pointer %sqlite::sqlite3))
  (%sqlite::x-auth (:pointer :void))
  (%sqlite::p-user-data (:pointer :void)))

(cffi:defcfun ("sqlite3_set_auxdata" %sqlite::set-auxdata)
    :void
  (%sqlite::arg0 (:pointer %sqlite::context))
  (%sqlite::n :int)
  (%sqlite::arg2 (:pointer :void))
  (%sqlite::arg3 (:pointer :void)))

(cffi:defcfun ("sqlite3_set_last_insert_rowid" %sqlite::set-last-insert-rowid)
    :void
  (%sqlite::arg0 (:pointer %sqlite::sqlite3))
  (%sqlite::arg1 %sqlite::int64))

(cffi:defcfun ("sqlite3_shutdown" %sqlite::shutdown)
    :int)

(cffi:defcfun ("sqlite3_sleep" %sqlite::sleep)
    :int
  (%sqlite::arg0 :int))

(cffi:defcstruct (%sqlite::snapshot :size 48)
  (%sqlite::hidden :unsigned-char :count 48 :offset 0))

(cffi:defctype %sqlite::snapshot (:struct %sqlite::snapshot))

(cffi:defcfun ("sqlite3_snapshot_cmp" %sqlite::snapshot-cmp)
    :int
  (%sqlite::p1 (:pointer %sqlite::snapshot))
  (%sqlite::p2 (:pointer %sqlite::snapshot)))

(cffi:defcfun ("sqlite3_snapshot_free" %sqlite::snapshot-free)
    :void
  (%sqlite::arg0 (:pointer %sqlite::snapshot)))

(cffi:defcfun ("sqlite3_snapshot_get" %sqlite::snapshot-get)
    :int
  (%sqlite::db (:pointer %sqlite::sqlite3))
  (%sqlite::z-schema :string)
  (%sqlite::pp-snapshot (:pointer (:pointer %sqlite::snapshot))))

(cffi:defcfun ("sqlite3_snapshot_open" %sqlite::snapshot-open)
    :int
  (%sqlite::db (:pointer %sqlite::sqlite3))
  (%sqlite::z-schema :string)
  (%sqlite::p-snapshot (:pointer %sqlite::snapshot)))

(cffi:defcfun ("sqlite3_snapshot_recover" %sqlite::snapshot-recover)
    :int
  (%sqlite::db (:pointer %sqlite::sqlite3))
  (%sqlite::z-db :string))

(cffi:defcfun ("sqlite3_snprintf" %sqlite::snprintf)
    :string
  (%sqlite::arg0 :int)
  (%sqlite::arg1 :string)
  (%sqlite::arg2 :string)
  &rest)

(cffi:defcfun ("sqlite3_soft_heap_limit" %sqlite::soft-heap-limit)
    :void
  (%sqlite::n :int))

(cffi:defcfun ("sqlite3_soft_heap_limit64" %sqlite::soft-heap-limit64)
    %sqlite::int64
  (%sqlite::n %sqlite::int64))

(cffi:defcfun ("sqlite3_sourceid" %sqlite::sourceid)
    :string)

(cffi:defcfun ("sqlite3_sql" %sqlite::sql)
    :string
  (%sqlite::p-stmt (:pointer %sqlite::stmt)))

(cffi:defcfun ("sqlite3_status" %sqlite::status)
    :int
  (%sqlite::op :int)
  (%sqlite::p-current (:pointer :int))
  (%sqlite::p-highwater (:pointer :int))
  (%sqlite::reset-flag :int))

(cffi:defcfun ("sqlite3_status64" %sqlite::status64)
    :int
  (%sqlite::op :int)
  (%sqlite::p-current (:pointer %sqlite::int64))
  (%sqlite::p-highwater (:pointer %sqlite::int64))
  (%sqlite::reset-flag :int))

(cffi:defcfun ("sqlite3_step" %sqlite::step)
    :int
  (%sqlite::arg0 (:pointer %sqlite::stmt)))

(cffi:defcfun ("sqlite3_stmt_busy" %sqlite::stmt-busy)
    :int
  (%sqlite::arg0 (:pointer %sqlite::stmt)))

(cffi:defcfun ("sqlite3_stmt_isexplain" %sqlite::stmt-isexplain)
    :int
  (%sqlite::p-stmt (:pointer %sqlite::stmt)))

(cffi:defcfun ("sqlite3_stmt_readonly" %sqlite::stmt-readonly)
    :int
  (%sqlite::p-stmt (:pointer %sqlite::stmt)))

(cffi:defcfun ("sqlite3_stmt_scanstatus" %sqlite::stmt-scanstatus)
    :int
  (%sqlite::p-stmt (:pointer %sqlite::stmt))
  (%sqlite::idx :int)
  (%sqlite::i-scan-status-op :int)
  (%sqlite::p-out (:pointer :void)))

(cffi:defcfun ("sqlite3_stmt_scanstatus_reset" %sqlite::stmt-scanstatus-reset)
    :void
  (%sqlite::arg0 (:pointer %sqlite::stmt)))

(cffi:defcfun ("sqlite3_stmt_status" %sqlite::stmt-status)
    :int
  (%sqlite::arg0 (:pointer %sqlite::stmt))
  (%sqlite::op :int)
  (%sqlite::reset-flg :int))

(cffi:defcstruct (%sqlite::str :size 0))

(cffi:defctype %sqlite::str (:struct %sqlite::str))

(cffi:defcfun ("sqlite3_str_append" %sqlite::str-append)
    :void
  (%sqlite::arg0 (:pointer %sqlite::str))
  (%sqlite::z-in :string)
  (%sqlite::n :int))

(cffi:defcfun ("sqlite3_str_appendall" %sqlite::str-appendall)
    :void
  (%sqlite::arg0 (:pointer %sqlite::str))
  (%sqlite::z-in :string))

(cffi:defcfun ("sqlite3_str_appendchar" %sqlite::str-appendchar)
    :void
  (%sqlite::arg0 (:pointer %sqlite::str))
  (%sqlite::n :int)
  (%sqlite::c :char))

(cffi:defcfun ("sqlite3_str_appendf" %sqlite::str-appendf)
    :void
  (%sqlite::arg0 (:pointer %sqlite::str))
  (%sqlite::z-format :string)
  &rest)

(cffi:defcfun ("sqlite3_str_errcode" %sqlite::str-errcode)
    :int
  (%sqlite::arg0 (:pointer %sqlite::str)))

(cffi:defcfun ("sqlite3_str_finish" %sqlite::str-finish)
    :string
  (%sqlite::arg0 (:pointer %sqlite::str)))

(cffi:defcfun ("sqlite3_str_length" %sqlite::str-length)
    :int
  (%sqlite::arg0 (:pointer %sqlite::str)))

(cffi:defcfun ("sqlite3_str_new" %sqlite::str-new)
    (:pointer %sqlite::str)
  (%sqlite::arg0 (:pointer %sqlite::sqlite3)))

(cffi:defcfun ("sqlite3_str_reset" %sqlite::str-reset)
    :void
  (%sqlite::arg0 (:pointer %sqlite::str)))

(cffi:defcfun ("sqlite3_str_value" %sqlite::str-value)
    :string
  (%sqlite::arg0 (:pointer %sqlite::str)))

(cffi:defctype %sqlite::va-list (:pointer :void))

(cffi:defcfun ("sqlite3_str_vappendf" %sqlite::str-vappendf)
    :void
  (%sqlite::arg0 (:pointer %sqlite::str))
  (%sqlite::z-format :string)
  (%sqlite::arg2 %sqlite::va-list))

(cffi:defcfun ("sqlite3_strglob" %sqlite::strglob)
    :int
  (%sqlite::z-glob :string)
  (%sqlite::z-str :string))

(cffi:defcfun ("sqlite3_stricmp" %sqlite::stricmp)
    :int
  (%sqlite::arg0 :string)
  (%sqlite::arg1 :string))

(cffi:defcfun ("sqlite3_strlike" %sqlite::strlike)
    :int
  (%sqlite::z-glob :string)
  (%sqlite::z-str :string)
  (%sqlite::c-esc :unsigned-int))

(cffi:defcfun ("sqlite3_strnicmp" %sqlite::strnicmp)
    :int
  (%sqlite::arg0 :string)
  (%sqlite::arg1 :string)
  (%sqlite::arg2 :int))

(cffi:defcfun ("sqlite3_system_errno" %sqlite::system-errno)
    :int
  (%sqlite::arg0 (:pointer %sqlite::sqlite3)))

(cffi:defcfun ("sqlite3_table_column_metadata" %sqlite::table-column-metadata)
    :int
  (%sqlite::db (:pointer %sqlite::sqlite3))
  (%sqlite::z-db-name :string)
  (%sqlite::z-table-name :string)
  (%sqlite::z-column-name :string)
  (%sqlite::pz-data-type :string)
  (%sqlite::pz-coll-seq :string)
  (%sqlite::p-not-null (:pointer :int))
  (%sqlite::p-primary-key (:pointer :int))
  (%sqlite::p-autoinc (:pointer :int)))

(cffi:defcfun ("sqlite3_test_control" %sqlite::test-control)
    :int
  (%sqlite::op :int)
  &rest)

(cffi:defcfun ("sqlite3_thread_cleanup" %sqlite::thread-cleanup)
    :void)

(cffi:defcfun ("sqlite3_threadsafe" %sqlite::threadsafe)
    :int)

(cffi:defcfun ("sqlite3_total_changes" %sqlite::total-changes)
    :int
  (%sqlite::arg0 (:pointer %sqlite::sqlite3)))

(cffi:defcfun ("sqlite3_total_changes64" %sqlite::total-changes64)
    %sqlite::int64
  (%sqlite::arg0 (:pointer %sqlite::sqlite3)))

(cffi:defcfun ("sqlite3_trace" %sqlite::trace)
    (:pointer :void)
  (%sqlite::arg0 (:pointer %sqlite::sqlite3))
  (%sqlite::x-trace (:pointer :void))
  (%sqlite::arg2 (:pointer :void)))

(cffi:defcfun ("sqlite3_trace_v2" %sqlite::trace-v2)
    :int
  (%sqlite::arg0 (:pointer %sqlite::sqlite3))
  (%sqlite::u-mask :unsigned-int)
  (%sqlite::x-callback (:pointer :void))
  (%sqlite::p-ctx (:pointer :void)))

(cffi:defcfun ("sqlite3_transfer_bindings" %sqlite::transfer-bindings)
    :int
  (%sqlite::arg0 (:pointer %sqlite::stmt))
  (%sqlite::arg1 (:pointer %sqlite::stmt)))

(cffi:defcfun ("sqlite3_txn_state" %sqlite::txn-state)
    :int
  (%sqlite::arg0 (:pointer %sqlite::sqlite3))
  (%sqlite::z-schema :string))

(cffi:defcfun ("sqlite3_unlock_notify" %sqlite::unlock-notify)
    :int
  (%sqlite::p-blocked (:pointer %sqlite::sqlite3))
  (%sqlite::x-notify (:pointer :void))
  (%sqlite::p-notify-arg (:pointer :void)))

(cffi:defcfun ("sqlite3_update_hook" %sqlite::update-hook)
    (:pointer :void)
  (%sqlite::arg0 (:pointer %sqlite::sqlite3))
  (%sqlite::arg1 (:pointer :void))
  (%sqlite::arg2 (:pointer :void)))

(cffi:defcfun ("sqlite3_uri_boolean" %sqlite::uri-boolean)
    :int
  (%sqlite::z-file :string)
  (%sqlite::z-param :string)
  (%sqlite::b-default :int))

(cffi:defcfun ("sqlite3_uri_int64" %sqlite::uri-int64)
    %sqlite::int64
  (%sqlite::arg0 :string)
  (%sqlite::arg1 :string)
  (%sqlite::arg2 %sqlite::int64))

(cffi:defcfun ("sqlite3_uri_key" %sqlite::uri-key)
    :string
  (%sqlite::z-filename :string)
  (%sqlite::n :int))

(cffi:defcfun ("sqlite3_uri_parameter" %sqlite::uri-parameter)
    :string
  (%sqlite::z-filename :string)
  (%sqlite::z-param :string))

(cffi:defcfun ("sqlite3_user_data" %sqlite::user-data)
    (:pointer :void)
  (%sqlite::arg0 (:pointer %sqlite::context)))

(cffi:defcfun ("sqlite3_value_blob" %sqlite::value-blob)
    (:pointer :void)
  (%sqlite::arg0 (:pointer %sqlite::value)))

(cffi:defcfun ("sqlite3_value_bytes" %sqlite::value-bytes)
    :int
  (%sqlite::arg0 (:pointer %sqlite::value)))

(cffi:defcfun ("sqlite3_value_bytes16" %sqlite::value-bytes16)
    :int
  (%sqlite::arg0 (:pointer %sqlite::value)))

(cffi:defcfun ("sqlite3_value_double" %sqlite::value-double)
    :double
  (%sqlite::arg0 (:pointer %sqlite::value)))

(cffi:defcfun ("sqlite3_value_dup" %sqlite::value-dup)
    (:pointer %sqlite::value)
  (%sqlite::arg0 (:pointer %sqlite::value)))

(cffi:defcfun ("sqlite3_value_free" %sqlite::value-free)
    :void
  (%sqlite::arg0 (:pointer %sqlite::value)))

(cffi:defcfun ("sqlite3_value_frombind" %sqlite::value-frombind)
    :int
  (%sqlite::arg0 (:pointer %sqlite::value)))

(cffi:defcfun ("sqlite3_value_int" %sqlite::value-int)
    :int
  (%sqlite::arg0 (:pointer %sqlite::value)))

(cffi:defcfun ("sqlite3_value_int64" %sqlite::value-int64)
    %sqlite::int64
  (%sqlite::arg0 (:pointer %sqlite::value)))

(cffi:defcfun ("sqlite3_value_nochange" %sqlite::value-nochange)
    :int
  (%sqlite::arg0 (:pointer %sqlite::value)))

(cffi:defcfun ("sqlite3_value_numeric_type" %sqlite::value-numeric-type)
    :int
  (%sqlite::arg0 (:pointer %sqlite::value)))

(cffi:defcfun ("sqlite3_value_pointer" %sqlite::value-pointer)
    (:pointer :void)
  (%sqlite::arg0 (:pointer %sqlite::value))
  (%sqlite::arg1 :string))

(cffi:defcfun ("sqlite3_value_subtype" %sqlite::value-subtype)
    :unsigned-int
  (%sqlite::arg0 (:pointer %sqlite::value)))

(cffi:defcfun ("sqlite3_value_text" %sqlite::value-text)
    (:pointer :unsigned-char)
  (%sqlite::arg0 (:pointer %sqlite::value)))

(cffi:defcfun ("sqlite3_value_text16" %sqlite::value-text16)
    (:pointer :void)
  (%sqlite::arg0 (:pointer %sqlite::value)))

(cffi:defcfun ("sqlite3_value_text16be" %sqlite::value-text16be)
    (:pointer :void)
  (%sqlite::arg0 (:pointer %sqlite::value)))

(cffi:defcfun ("sqlite3_value_text16le" %sqlite::value-text16le)
    (:pointer :void)
  (%sqlite::arg0 (:pointer %sqlite::value)))

(cffi:defcfun ("sqlite3_value_type" %sqlite::value-type)
    :int
  (%sqlite::arg0 (:pointer %sqlite::value)))

(cffi:defcstruct (%sqlite::vfs :size 168))

(cffi:defctype %sqlite::vfs (:struct %sqlite::vfs))

(cffi:defcstruct (%sqlite::vfs :size 168)
  (%sqlite::i-version :int :offset 0)
  (%sqlite::sz-os-file :int :offset 4)
  (%sqlite::mx-pathname :int :offset 8)
  (%sqlite::p-next (:pointer %sqlite::vfs) :offset 16)
  (%sqlite::z-name :string :offset 24)
  (%sqlite::p-app-data (:pointer :void) :offset 32)
  (%sqlite::x-open (:pointer :void) :offset 40)
  (%sqlite::x-delete (:pointer :void) :offset 48)
  (%sqlite::x-access (:pointer :void) :offset 56)
  (%sqlite::x-full-pathname (:pointer :void) :offset 64)
  (%sqlite::x-dl-open (:pointer :void) :offset 72)
  (%sqlite::x-dl-error (:pointer :void) :offset 80)
  (%sqlite::x-dl-sym (:pointer :void) :offset 88)
  (%sqlite::x-dl-close (:pointer :void) :offset 96)
  (%sqlite::x-randomness (:pointer :void) :offset 104)
  (%sqlite::x-sleep (:pointer :void) :offset 112)
  (%sqlite::x-current-time (:pointer :void) :offset 120)
  (%sqlite::x-get-last-error (:pointer :void) :offset 128)
  (%sqlite::x-current-time-int64 (:pointer :void) :offset 136)
  (%sqlite::x-set-system-call (:pointer :void) :offset 144)
  (%sqlite::x-get-system-call (:pointer :void) :offset 152)
  (%sqlite::x-next-system-call (:pointer :void) :offset 160))

(cffi:defctype %sqlite::vfs (:struct %sqlite::vfs))

(cffi:defcfun ("sqlite3_vfs_find" %sqlite::vfs-find)
    (:pointer %sqlite::vfs)
  (%sqlite::z-vfs-name :string))

(cffi:defcfun ("sqlite3_vfs_register" %sqlite::vfs-register)
    :int
  (%sqlite::arg0 (:pointer %sqlite::vfs))
  (%sqlite::make-dflt :int))

(cffi:defcfun ("sqlite3_vfs_unregister" %sqlite::vfs-unregister)
    :int
  (%sqlite::arg0 (:pointer %sqlite::vfs)))

(cffi:defcfun ("sqlite3_vmprintf" %sqlite::vmprintf)
    :string
  (%sqlite::arg0 :string)
  (%sqlite::arg1 %sqlite::va-list))

(cffi:defcfun ("sqlite3_vsnprintf" %sqlite::vsnprintf)
    :string
  (%sqlite::arg0 :int)
  (%sqlite::arg1 :string)
  (%sqlite::arg2 :string)
  (%sqlite::arg3 %sqlite::va-list))

(cffi:defcstruct (%sqlite::index-constraint :size 12)
  (%sqlite::i-column :int :offset 0)
  (%sqlite::op :unsigned-char :offset 4)
  (%sqlite::usable :unsigned-char :offset 5)
  (%sqlite::i-term-offset :int :offset 8))

(cffi:defcstruct (%sqlite::index-orderby :size 8)
  (%sqlite::i-column :int :offset 0)
  (%sqlite::desc :unsigned-char :offset 4))

(cffi:defcstruct (%sqlite::index-constraint-usage :size 8)
  (%sqlite::argv-index :int :offset 0)
  (%sqlite::omit :unsigned-char :offset 4))

(cffi:defcstruct (%sqlite::index-info :size 96)
  (%sqlite::n-constraint :int :offset 0)
  (%sqlite::a-constraint (:pointer (:struct %sqlite::index-constraint)) :offset
   8)
  (%sqlite::n-order-by :int :offset 16)
  (%sqlite::a-order-by (:pointer (:struct %sqlite::index-orderby)) :offset 24)
  (%sqlite::a-constraint-usage
   (:pointer (:struct %sqlite::index-constraint-usage)) :offset 32)
  (%sqlite::idx-num :int :offset 40)
  (%sqlite::idx-str :string :offset 48)
  (%sqlite::need-to-free-idx-str :int :offset 56)
  (%sqlite::order-by-consumed :int :offset 60)
  (%sqlite::estimated-cost :double :offset 64)
  (%sqlite::estimated-rows %sqlite::int64 :offset 72)
  (%sqlite::idx-flags :int :offset 80)
  (%sqlite::col-used %sqlite::uint64 :offset 88))

(cffi:defctype %sqlite::index-info (:struct %sqlite::index-info))

(cffi:defcfun ("sqlite3_vtab_collation" %sqlite::vtab-collation)
    :string
  (%sqlite::arg0 (:pointer %sqlite::index-info))
  (%sqlite::arg1 :int))

(cffi:defcfun ("sqlite3_vtab_config" %sqlite::vtab-config)
    :int
  (%sqlite::arg0 (:pointer %sqlite::sqlite3))
  (%sqlite::op :int)
  &rest)

(cffi:defcfun ("sqlite3_vtab_distinct" %sqlite::vtab-distinct)
    :int
  (%sqlite::arg0 (:pointer %sqlite::index-info)))

(cffi:defcfun ("sqlite3_vtab_in" %sqlite::vtab-in)
    :int
  (%sqlite::arg0 (:pointer %sqlite::index-info))
  (%sqlite::i-cons :int)
  (%sqlite::b-handle :int))

(cffi:defcfun ("sqlite3_vtab_in_first" %sqlite::vtab-in-first)
    :int
  (%sqlite::p-val (:pointer %sqlite::value))
  (%sqlite::pp-out (:pointer (:pointer %sqlite::value))))

(cffi:defcfun ("sqlite3_vtab_in_next" %sqlite::vtab-in-next)
    :int
  (%sqlite::p-val (:pointer %sqlite::value))
  (%sqlite::pp-out (:pointer (:pointer %sqlite::value))))

(cffi:defcfun ("sqlite3_vtab_nochange" %sqlite::vtab-nochange)
    :int
  (%sqlite::arg0 (:pointer %sqlite::context)))

(cffi:defcfun ("sqlite3_vtab_on_conflict" %sqlite::vtab-on-conflict)
    :int
  (%sqlite::arg0 (:pointer %sqlite::sqlite3)))

(cffi:defcfun ("sqlite3_vtab_rhs_value" %sqlite::vtab-rhs-value)
    :int
  (%sqlite::arg0 (:pointer %sqlite::index-info))
  (%sqlite::arg1 :int)
  (%sqlite::pp-val (:pointer (:pointer %sqlite::value))))

(cffi:defcfun ("sqlite3_wal_autocheckpoint" %sqlite::wal-autocheckpoint)
    :int
  (%sqlite::db (:pointer %sqlite::sqlite3))
  (%sqlite::n :int))

(cffi:defcfun ("sqlite3_wal_checkpoint" %sqlite::wal-checkpoint)
    :int
  (%sqlite::db (:pointer %sqlite::sqlite3))
  (%sqlite::z-db :string))

(cffi:defcfun ("sqlite3_wal_checkpoint_v2" %sqlite::wal-checkpoint-v2)
    :int
  (%sqlite::db (:pointer %sqlite::sqlite3))
  (%sqlite::z-db :string)
  (%sqlite::e-mode :int)
  (%sqlite::pn-log (:pointer :int))
  (%sqlite::pn-ckpt (:pointer :int)))

(cffi:defcfun ("sqlite3_wal_hook" %sqlite::wal-hook)
    (:pointer :void)
  (%sqlite::arg0 (:pointer %sqlite::sqlite3))
  (%sqlite::arg1 (:pointer :void))
  (%sqlite::arg2 (:pointer :void)))

(cffi:defcfun ("sqlite3_win32_set_directory" %sqlite::win32-set-directory)
    :int
  (%sqlite::type :unsigned-long)
  (%sqlite::z-value (:pointer :void)))

(cffi:defcfun ("sqlite3_win32_set_directory16" %sqlite::win32-set-directory16)
    :int
  (%sqlite::type :unsigned-long)
  (%sqlite::z-value (:pointer :void)))

(cffi:defcfun ("sqlite3_win32_set_directory8" %sqlite::win32-set-directory8)
    :int
  (%sqlite::type :unsigned-long)
  (%sqlite::z-value :string))

(cffi:defcstruct (%sqlite::%%va-list-tag :size 24)
  (%sqlite::gp-offset :unsigned-int :offset 0)
  (%sqlite::fp-offset :unsigned-int :offset 4)
  (%sqlite::overflow-arg-area (:pointer :void) :offset 8)
  (%sqlite::reg-save-area (:pointer :void) :offset 16))

(cffi:defcstruct (%sqlite::api-routines :size 0))

(cffi:defcstruct (%sqlite::mem-methods :size 64)
  (%sqlite::x-malloc (:pointer :void) :offset 0)
  (%sqlite::x-free (:pointer :void) :offset 8)
  (%sqlite::x-realloc (:pointer :void) :offset 16)
  (%sqlite::x-size (:pointer :void) :offset 24)
  (%sqlite::x-roundup (:pointer :void) :offset 32)
  (%sqlite::x-init (:pointer :void) :offset 40)
  (%sqlite::x-shutdown (:pointer :void) :offset 48)
  (%sqlite::p-app-data (:pointer :void) :offset 56))

(cffi:defcstruct (%sqlite::mutex-methods :size 72)
  (%sqlite::x-mutex-init (:pointer :void) :offset 0)
  (%sqlite::x-mutex-end (:pointer :void) :offset 8)
  (%sqlite::x-mutex-alloc (:pointer :void) :offset 16)
  (%sqlite::x-mutex-free (:pointer :void) :offset 24)
  (%sqlite::x-mutex-enter (:pointer :void) :offset 32)
  (%sqlite::x-mutex-try (:pointer :void) :offset 40)
  (%sqlite::x-mutex-leave (:pointer :void) :offset 48)
  (%sqlite::x-mutex-held (:pointer :void) :offset 56)
  (%sqlite::x-mutex-notheld (:pointer :void) :offset 64))

(cffi:defcstruct (%sqlite::pcache :size 0))

(cffi:defcstruct (%sqlite::pcache-methods :size 88)
  (%sqlite::p-arg (:pointer :void) :offset 0)
  (%sqlite::x-init (:pointer :void) :offset 8)
  (%sqlite::x-shutdown (:pointer :void) :offset 16)
  (%sqlite::x-create (:pointer :void) :offset 24)
  (%sqlite::x-cachesize (:pointer :void) :offset 32)
  (%sqlite::x-pagecount (:pointer :void) :offset 40)
  (%sqlite::x-fetch (:pointer :void) :offset 48)
  (%sqlite::x-unpin (:pointer :void) :offset 56)
  (%sqlite::x-rekey (:pointer :void) :offset 64)
  (%sqlite::x-truncate (:pointer :void) :offset 72)
  (%sqlite::x-destroy (:pointer :void) :offset 80))

(cffi:defcstruct (%sqlite::pcache-methods2 :size 104)
  (%sqlite::i-version :int :offset 0)
  (%sqlite::p-arg (:pointer :void) :offset 8)
  (%sqlite::x-init (:pointer :void) :offset 16)
  (%sqlite::x-shutdown (:pointer :void) :offset 24)
  (%sqlite::x-create (:pointer :void) :offset 32)
  (%sqlite::x-cachesize (:pointer :void) :offset 40)
  (%sqlite::x-pagecount (:pointer :void) :offset 48)
  (%sqlite::x-fetch (:pointer :void) :offset 56)
  (%sqlite::x-unpin (:pointer :void) :offset 64)
  (%sqlite::x-rekey (:pointer :void) :offset 72)
  (%sqlite::x-truncate (:pointer :void) :offset 80)
  (%sqlite::x-destroy (:pointer :void) :offset 88)
  (%sqlite::x-shrink (:pointer :void) :offset 96))

(cffi:defcstruct (%sqlite::pcache-page :size 16)
  (%sqlite::p-buf (:pointer :void) :offset 0)
  (%sqlite::p-extra (:pointer :void) :offset 8))

(cffi:defctype %sqlite::rtree-dbl :double)

(cffi:defcstruct (%sqlite::rtree-geometry :size 40)
  (%sqlite::p-context (:pointer :void) :offset 0)
  (%sqlite::n-param :int :offset 8)
  (%sqlite::a-param (:pointer %sqlite::rtree-dbl) :offset 16)
  (%sqlite::p-user (:pointer :void) :offset 24)
  (%sqlite::x-del-user (:pointer :void) :offset 32))

(cffi:defcstruct (%sqlite::rtree-query-info :size 112)
  (%sqlite::p-context (:pointer :void) :offset 0)
  (%sqlite::n-param :int :offset 8)
  (%sqlite::a-param (:pointer %sqlite::rtree-dbl) :offset 16)
  (%sqlite::p-user (:pointer :void) :offset 24)
  (%sqlite::x-del-user (:pointer :void) :offset 32)
  (%sqlite::a-coord (:pointer %sqlite::rtree-dbl) :offset 40)
  (%sqlite::an-queue (:pointer :unsigned-int) :offset 48)
  (%sqlite::n-coord :int :offset 56)
  (%sqlite::i-level :int :offset 60)
  (%sqlite::mx-level :int :offset 64)
  (%sqlite::i-rowid %sqlite::int64 :offset 72)
  (%sqlite::r-parent-score %sqlite::rtree-dbl :offset 80)
  (%sqlite::e-parent-within :int :offset 88)
  (%sqlite::e-within :int :offset 92)
  (%sqlite::r-score %sqlite::rtree-dbl :offset 96)
  (%sqlite::ap-sql-param (:pointer (:pointer %sqlite::value)) :offset 104))

(cffi:defcstruct (%sqlite::vtab :size 24)
  (%sqlite::p-module (:pointer %sqlite::module) :offset 0)
  (%sqlite::n-ref :int :offset 8)
  (%sqlite::z-err-msg :string :offset 16))

(cffi:defctype %sqlite::vtab (:struct %sqlite::vtab))

(cffi:defcstruct (%sqlite::vtab-cursor :size 8)
  (%sqlite::p-vtab (:pointer %sqlite::vtab) :offset 0))

(define-symbol-macro %sqlite::*data-directory*
                     (let ((%sqlite::ptr
                            (cffi:foreign-symbol-pointer
                             "sqlite3_data_directory")))
                       (when %sqlite::ptr
                         (cffi:mem-ref %sqlite::ptr ':string))))

(define-symbol-macro %sqlite::*temp-directory*
                     (let ((%sqlite::ptr
                            (cffi:foreign-symbol-pointer
                             "sqlite3_temp_directory")))
                       (when %sqlite::ptr
                         (cffi:mem-ref %sqlite::ptr ':string))))

(define-symbol-macro %sqlite::*version*
                     (cffi:foreign-symbol-pointer "sqlite3_version"))

(cffi:defctype %sqlite::api-routines (:struct %sqlite::api-routines))

(cffi:defctype %sqlite::callback (:pointer :void))

(cffi:defctype %sqlite::destructor-type (:pointer :void))

(cffi:defctype %sqlite::io-methods (:struct %sqlite::io-methods))

(cffi:defctype %sqlite::mem-methods (:struct %sqlite::mem-methods))

(cffi:defctype %sqlite::mutex-methods (:struct %sqlite::mutex-methods))

(cffi:defctype %sqlite::pcache (:struct %sqlite::pcache))

(cffi:defctype %sqlite::pcache-methods (:struct %sqlite::pcache-methods))

(cffi:defctype %sqlite::pcache-methods2 (:struct %sqlite::pcache-methods2))

(cffi:defctype %sqlite::pcache-page (:struct %sqlite::pcache-page))

(cffi:defctype %sqlite::rtree-geometry (:struct %sqlite::rtree-geometry))

(cffi:defctype %sqlite::rtree-query-info (:struct %sqlite::rtree-query-info))

(cffi:defctype %sqlite::syscall-ptr (:pointer :void))

(cffi:defctype %sqlite::vtab-cursor (:struct %sqlite::vtab-cursor))

(eval-when (:load-toplevel :compile-toplevel :execute)
  (export '%sqlite::+sqlite3-h+ :%sqlite)
  (export '%sqlite::+sqlite3-text+ :%sqlite)
  (export '%sqlite::+abort+ :%sqlite)
  (export '%sqlite::+abort-rollback+ :%sqlite)
  (export '%sqlite::+access-exists+ :%sqlite)
  (export '%sqlite::+access-read+ :%sqlite)
  (export '%sqlite::+access-readwrite+ :%sqlite)
  (export '%sqlite::+alter-table+ :%sqlite)
  (export '%sqlite::+analyze+ :%sqlite)
  (export '%sqlite::+any+ :%sqlite)
  (export '%sqlite::+api+ :%sqlite)
  (export '%sqlite::+apicall+ :%sqlite)
  (export '%sqlite::+attach+ :%sqlite)
  (export '%sqlite::+auth+ :%sqlite)
  (export '%sqlite::+auth-user+ :%sqlite)
  (export '%sqlite::+blob+ :%sqlite)
  (export '%sqlite::+busy+ :%sqlite)
  (export '%sqlite::+busy-recovery+ :%sqlite)
  (export '%sqlite::+busy-snapshot+ :%sqlite)
  (export '%sqlite::+busy-timeout+ :%sqlite)
  (export '%sqlite::+callback+ :%sqlite)
  (export '%sqlite::+cantopen+ :%sqlite)
  (export '%sqlite::+cantopen-convpath+ :%sqlite)
  (export '%sqlite::+cantopen-dirtywal+ :%sqlite)
  (export '%sqlite::+cantopen-fullpath+ :%sqlite)
  (export '%sqlite::+cantopen-isdir+ :%sqlite)
  (export '%sqlite::+cantopen-notempdir+ :%sqlite)
  (export '%sqlite::+cantopen-symlink+ :%sqlite)
  (export '%sqlite::+cdecl+ :%sqlite)
  (export '%sqlite::+checkpoint-full+ :%sqlite)
  (export '%sqlite::+checkpoint-passive+ :%sqlite)
  (export '%sqlite::+checkpoint-restart+ :%sqlite)
  (export '%sqlite::+checkpoint-truncate+ :%sqlite)
  (export '%sqlite::+config-covering-index-scan+ :%sqlite)
  (export '%sqlite::+config-getmalloc+ :%sqlite)
  (export '%sqlite::+config-getmutex+ :%sqlite)
  (export '%sqlite::+config-getpcache+ :%sqlite)
  (export '%sqlite::+config-getpcache2+ :%sqlite)
  (export '%sqlite::+config-heap+ :%sqlite)
  (export '%sqlite::+config-log+ :%sqlite)
  (export '%sqlite::+config-lookaside+ :%sqlite)
  (export '%sqlite::+config-malloc+ :%sqlite)
  (export '%sqlite::+config-memdb-maxsize+ :%sqlite)
  (export '%sqlite::+config-memstatus+ :%sqlite)
  (export '%sqlite::+config-mmap-size+ :%sqlite)
  (export '%sqlite::+config-multithread+ :%sqlite)
  (export '%sqlite::+config-mutex+ :%sqlite)
  (export '%sqlite::+config-pagecache+ :%sqlite)
  (export '%sqlite::+config-pcache+ :%sqlite)
  (export '%sqlite::+config-pcache2+ :%sqlite)
  (export '%sqlite::+config-pcache-hdrsz+ :%sqlite)
  (export '%sqlite::+config-pmasz+ :%sqlite)
  (export '%sqlite::+config-scratch+ :%sqlite)
  (export '%sqlite::+config-serialized+ :%sqlite)
  (export '%sqlite::+config-singlethread+ :%sqlite)
  (export '%sqlite::+config-small-malloc+ :%sqlite)
  (export '%sqlite::+config-sorterref-size+ :%sqlite)
  (export '%sqlite::+config-sqllog+ :%sqlite)
  (export '%sqlite::+config-stmtjrnl-spill+ :%sqlite)
  (export '%sqlite::+config-uri+ :%sqlite)
  (export '%sqlite::+config-win32-heapsize+ :%sqlite)
  (export '%sqlite::+constraint+ :%sqlite)
  (export '%sqlite::+constraint-check+ :%sqlite)
  (export '%sqlite::+constraint-commithook+ :%sqlite)
  (export '%sqlite::+constraint-datatype+ :%sqlite)
  (export '%sqlite::+constraint-foreignkey+ :%sqlite)
  (export '%sqlite::+constraint-function+ :%sqlite)
  (export '%sqlite::+constraint-notnull+ :%sqlite)
  (export '%sqlite::+constraint-pinned+ :%sqlite)
  (export '%sqlite::+constraint-primarykey+ :%sqlite)
  (export '%sqlite::+constraint-rowid+ :%sqlite)
  (export '%sqlite::+constraint-trigger+ :%sqlite)
  (export '%sqlite::+constraint-unique+ :%sqlite)
  (export '%sqlite::+constraint-vtab+ :%sqlite)
  (export '%sqlite::+copy+ :%sqlite)
  (export '%sqlite::+corrupt+ :%sqlite)
  (export '%sqlite::+corrupt-index+ :%sqlite)
  (export '%sqlite::+corrupt-sequence+ :%sqlite)
  (export '%sqlite::+corrupt-vtab+ :%sqlite)
  (export '%sqlite::+create-index+ :%sqlite)
  (export '%sqlite::+create-table+ :%sqlite)
  (export '%sqlite::+create-temp-index+ :%sqlite)
  (export '%sqlite::+create-temp-table+ :%sqlite)
  (export '%sqlite::+create-temp-trigger+ :%sqlite)
  (export '%sqlite::+create-temp-view+ :%sqlite)
  (export '%sqlite::+create-trigger+ :%sqlite)
  (export '%sqlite::+create-view+ :%sqlite)
  (export '%sqlite::+create-vtable+ :%sqlite)
  (export '%sqlite::+dbconfig-defensive+ :%sqlite)
  (export '%sqlite::+dbconfig-dqs-ddl+ :%sqlite)
  (export '%sqlite::+dbconfig-dqs-dml+ :%sqlite)
  (export '%sqlite::+dbconfig-enable-fkey+ :%sqlite)
  (export '%sqlite::+dbconfig-enable-fts3-tokenizer+ :%sqlite)
  (export '%sqlite::+dbconfig-enable-load-extension+ :%sqlite)
  (export '%sqlite::+dbconfig-enable-qpsg+ :%sqlite)
  (export '%sqlite::+dbconfig-enable-trigger+ :%sqlite)
  (export '%sqlite::+dbconfig-enable-view+ :%sqlite)
  (export '%sqlite::+dbconfig-legacy-alter-table+ :%sqlite)
  (export '%sqlite::+dbconfig-legacy-file-format+ :%sqlite)
  (export '%sqlite::+dbconfig-lookaside+ :%sqlite)
  (export '%sqlite::+dbconfig-maindbname+ :%sqlite)
  (export '%sqlite::+dbconfig-max+ :%sqlite)
  (export '%sqlite::+dbconfig-no-ckpt-on-close+ :%sqlite)
  (export '%sqlite::+dbconfig-reset-database+ :%sqlite)
  (export '%sqlite::+dbconfig-trigger-eqp+ :%sqlite)
  (export '%sqlite::+dbconfig-trusted-schema+ :%sqlite)
  (export '%sqlite::+dbconfig-writable-schema+ :%sqlite)
  (export '%sqlite::+dbstatus-cache-hit+ :%sqlite)
  (export '%sqlite::+dbstatus-cache-miss+ :%sqlite)
  (export '%sqlite::+dbstatus-cache-spill+ :%sqlite)
  (export '%sqlite::+dbstatus-cache-used+ :%sqlite)
  (export '%sqlite::+dbstatus-cache-used-shared+ :%sqlite)
  (export '%sqlite::+dbstatus-cache-write+ :%sqlite)
  (export '%sqlite::+dbstatus-deferred-fks+ :%sqlite)
  (export '%sqlite::+dbstatus-lookaside-hit+ :%sqlite)
  (export '%sqlite::+dbstatus-lookaside-miss-full+ :%sqlite)
  (export '%sqlite::+dbstatus-lookaside-miss-size+ :%sqlite)
  (export '%sqlite::+dbstatus-lookaside-used+ :%sqlite)
  (export '%sqlite::+dbstatus-max+ :%sqlite)
  (export '%sqlite::+dbstatus-schema-used+ :%sqlite)
  (export '%sqlite::+dbstatus-stmt-used+ :%sqlite)
  (export '%sqlite::+delete+ :%sqlite)
  (export '%sqlite::+deny+ :%sqlite)
  (export '%sqlite::+deprecated+ :%sqlite)
  (export '%sqlite::+deserialize-freeonclose+ :%sqlite)
  (export '%sqlite::+deserialize-readonly+ :%sqlite)
  (export '%sqlite::+deserialize-resizeable+ :%sqlite)
  (export '%sqlite::+detach+ :%sqlite)
  (export '%sqlite::+deterministic+ :%sqlite)
  (export '%sqlite::+directonly+ :%sqlite)
  (export '%sqlite::+done+ :%sqlite)
  (export '%sqlite::+drop-index+ :%sqlite)
  (export '%sqlite::+drop-table+ :%sqlite)
  (export '%sqlite::+drop-temp-index+ :%sqlite)
  (export '%sqlite::+drop-temp-table+ :%sqlite)
  (export '%sqlite::+drop-temp-trigger+ :%sqlite)
  (export '%sqlite::+drop-temp-view+ :%sqlite)
  (export '%sqlite::+drop-trigger+ :%sqlite)
  (export '%sqlite::+drop-view+ :%sqlite)
  (export '%sqlite::+drop-vtable+ :%sqlite)
  (export '%sqlite::+empty+ :%sqlite)
  (export '%sqlite::+error+ :%sqlite)
  (export '%sqlite::+error-missing-collseq+ :%sqlite)
  (export '%sqlite::+error-retry+ :%sqlite)
  (export '%sqlite::+error-snapshot+ :%sqlite)
  (export '%sqlite::+experimental+ :%sqlite)
  (export '%sqlite::+extern+ :%sqlite)
  (export '%sqlite::+fail+ :%sqlite)
  (export '%sqlite::+fcntl-begin-atomic-write+ :%sqlite)
  (export '%sqlite::+fcntl-busyhandler+ :%sqlite)
  (export '%sqlite::+fcntl-chunk-size+ :%sqlite)
  (export '%sqlite::+fcntl-ckpt-done+ :%sqlite)
  (export '%sqlite::+fcntl-ckpt-start+ :%sqlite)
  (export '%sqlite::+fcntl-cksm-file+ :%sqlite)
  (export '%sqlite::+fcntl-commit-atomic-write+ :%sqlite)
  (export '%sqlite::+fcntl-commit-phasetwo+ :%sqlite)
  (export '%sqlite::+fcntl-data-version+ :%sqlite)
  (export '%sqlite::+fcntl-external-reader+ :%sqlite)
  (export '%sqlite::+fcntl-file-pointer+ :%sqlite)
  (export '%sqlite::+fcntl-get-lockproxyfile+ :%sqlite)
  (export '%sqlite::+fcntl-has-moved+ :%sqlite)
  (export '%sqlite::+fcntl-journal-pointer+ :%sqlite)
  (export '%sqlite::+fcntl-last-errno+ :%sqlite)
  (export '%sqlite::+fcntl-lockstate+ :%sqlite)
  (export '%sqlite::+fcntl-lock-timeout+ :%sqlite)
  (export '%sqlite::+fcntl-mmap-size+ :%sqlite)
  (export '%sqlite::+fcntl-overwrite+ :%sqlite)
  (export '%sqlite::+fcntl-pdb+ :%sqlite)
  (export '%sqlite::+fcntl-persist-wal+ :%sqlite)
  (export '%sqlite::+fcntl-powersafe-overwrite+ :%sqlite)
  (export '%sqlite::+fcntl-pragma+ :%sqlite)
  (export '%sqlite::+fcntl-rbu+ :%sqlite)
  (export '%sqlite::+fcntl-reserve-bytes+ :%sqlite)
  (export '%sqlite::+fcntl-rollback-atomic-write+ :%sqlite)
  (export '%sqlite::+fcntl-set-lockproxyfile+ :%sqlite)
  (export '%sqlite::+fcntl-size-hint+ :%sqlite)
  (export '%sqlite::+fcntl-size-limit+ :%sqlite)
  (export '%sqlite::+fcntl-sync+ :%sqlite)
  (export '%sqlite::+fcntl-sync-omitted+ :%sqlite)
  (export '%sqlite::+fcntl-tempfilename+ :%sqlite)
  (export '%sqlite::+fcntl-trace+ :%sqlite)
  (export '%sqlite::+fcntl-vfsname+ :%sqlite)
  (export '%sqlite::+fcntl-vfs-pointer+ :%sqlite)
  (export '%sqlite::+fcntl-wal-block+ :%sqlite)
  (export '%sqlite::+fcntl-win32-av-retry+ :%sqlite)
  (export '%sqlite::+fcntl-win32-get-handle+ :%sqlite)
  (export '%sqlite::+fcntl-win32-set-handle+ :%sqlite)
  (export '%sqlite::+fcntl-zipvfs+ :%sqlite)
  (export '%sqlite::+float+ :%sqlite)
  (export '%sqlite::+format+ :%sqlite)
  (export '%sqlite::+full+ :%sqlite)
  (export '%sqlite::+function+ :%sqlite)
  (export '%sqlite::+get-lockproxyfile+ :%sqlite)
  (export '%sqlite::+ignore+ :%sqlite)
  (export '%sqlite::+index-constraint-eq+ :%sqlite)
  (export '%sqlite::+index-constraint-function+ :%sqlite)
  (export '%sqlite::+index-constraint-ge+ :%sqlite)
  (export '%sqlite::+index-constraint-glob+ :%sqlite)
  (export '%sqlite::+index-constraint-gt+ :%sqlite)
  (export '%sqlite::+index-constraint-is+ :%sqlite)
  (export '%sqlite::+index-constraint-isnot+ :%sqlite)
  (export '%sqlite::+index-constraint-isnotnull+ :%sqlite)
  (export '%sqlite::+index-constraint-isnull+ :%sqlite)
  (export '%sqlite::+index-constraint-le+ :%sqlite)
  (export '%sqlite::+index-constraint-like+ :%sqlite)
  (export '%sqlite::+index-constraint-limit+ :%sqlite)
  (export '%sqlite::+index-constraint-lt+ :%sqlite)
  (export '%sqlite::+index-constraint-match+ :%sqlite)
  (export '%sqlite::+index-constraint-ne+ :%sqlite)
  (export '%sqlite::+index-constraint-offset+ :%sqlite)
  (export '%sqlite::+index-constraint-regexp+ :%sqlite)
  (export '%sqlite::+index-scan-unique+ :%sqlite)
  (export '%sqlite::+innocuous+ :%sqlite)
  (export '%sqlite::+insert+ :%sqlite)
  (export '%sqlite::+integer+ :%sqlite)
  (export '%sqlite::+internal+ :%sqlite)
  (export '%sqlite::+interrupt+ :%sqlite)
  (export '%sqlite::+iocap-atomic+ :%sqlite)
  (export '%sqlite::+iocap-atomic16k+ :%sqlite)
  (export '%sqlite::+iocap-atomic1k+ :%sqlite)
  (export '%sqlite::+iocap-atomic2k+ :%sqlite)
  (export '%sqlite::+iocap-atomic32k+ :%sqlite)
  (export '%sqlite::+iocap-atomic4k+ :%sqlite)
  (export '%sqlite::+iocap-atomic512+ :%sqlite)
  (export '%sqlite::+iocap-atomic64k+ :%sqlite)
  (export '%sqlite::+iocap-atomic8k+ :%sqlite)
  (export '%sqlite::+iocap-batch-atomic+ :%sqlite)
  (export '%sqlite::+iocap-immutable+ :%sqlite)
  (export '%sqlite::+iocap-powersafe-overwrite+ :%sqlite)
  (export '%sqlite::+iocap-safe-append+ :%sqlite)
  (export '%sqlite::+iocap-sequential+ :%sqlite)
  (export '%sqlite::+iocap-undeletable-when-open+ :%sqlite)
  (export '%sqlite::+ioerr+ :%sqlite)
  (export '%sqlite::+ioerr-access+ :%sqlite)
  (export '%sqlite::+ioerr-auth+ :%sqlite)
  (export '%sqlite::+ioerr-begin-atomic+ :%sqlite)
  (export '%sqlite::+ioerr-blocked+ :%sqlite)
  (export '%sqlite::+ioerr-checkreservedlock+ :%sqlite)
  (export '%sqlite::+ioerr-close+ :%sqlite)
  (export '%sqlite::+ioerr-commit-atomic+ :%sqlite)
  (export '%sqlite::+ioerr-convpath+ :%sqlite)
  (export '%sqlite::+ioerr-corruptfs+ :%sqlite)
  (export '%sqlite::+ioerr-data+ :%sqlite)
  (export '%sqlite::+ioerr-delete+ :%sqlite)
  (export '%sqlite::+ioerr-delete-noent+ :%sqlite)
  (export '%sqlite::+ioerr-dir-close+ :%sqlite)
  (export '%sqlite::+ioerr-dir-fsync+ :%sqlite)
  (export '%sqlite::+ioerr-fstat+ :%sqlite)
  (export '%sqlite::+ioerr-fsync+ :%sqlite)
  (export '%sqlite::+ioerr-gettemppath+ :%sqlite)
  (export '%sqlite::+ioerr-lock+ :%sqlite)
  (export '%sqlite::+ioerr-mmap+ :%sqlite)
  (export '%sqlite::+ioerr-nomem+ :%sqlite)
  (export '%sqlite::+ioerr-rdlock+ :%sqlite)
  (export '%sqlite::+ioerr-read+ :%sqlite)
  (export '%sqlite::+ioerr-rollback-atomic+ :%sqlite)
  (export '%sqlite::+ioerr-seek+ :%sqlite)
  (export '%sqlite::+ioerr-shmlock+ :%sqlite)
  (export '%sqlite::+ioerr-shmmap+ :%sqlite)
  (export '%sqlite::+ioerr-shmopen+ :%sqlite)
  (export '%sqlite::+ioerr-shmsize+ :%sqlite)
  (export '%sqlite::+ioerr-short-read+ :%sqlite)
  (export '%sqlite::+ioerr-truncate+ :%sqlite)
  (export '%sqlite::+ioerr-unlock+ :%sqlite)
  (export '%sqlite::+ioerr-vnode+ :%sqlite)
  (export '%sqlite::+ioerr-write+ :%sqlite)
  (export '%sqlite::+last-errno+ :%sqlite)
  (export '%sqlite::+limit-attached+ :%sqlite)
  (export '%sqlite::+limit-column+ :%sqlite)
  (export '%sqlite::+limit-compound-select+ :%sqlite)
  (export '%sqlite::+limit-expr-depth+ :%sqlite)
  (export '%sqlite::+limit-function-arg+ :%sqlite)
  (export '%sqlite::+limit-length+ :%sqlite)
  (export '%sqlite::+limit-like-pattern-length+ :%sqlite)
  (export '%sqlite::+limit-sql-length+ :%sqlite)
  (export '%sqlite::+limit-trigger-depth+ :%sqlite)
  (export '%sqlite::+limit-variable-number+ :%sqlite)
  (export '%sqlite::+limit-vdbe-op+ :%sqlite)
  (export '%sqlite::+limit-worker-threads+ :%sqlite)
  (export '%sqlite::+locked+ :%sqlite)
  (export '%sqlite::+locked-sharedcache+ :%sqlite)
  (export '%sqlite::+locked-vtab+ :%sqlite)
  (export '%sqlite::+lock-exclusive+ :%sqlite)
  (export '%sqlite::+lock-none+ :%sqlite)
  (export '%sqlite::+lock-pending+ :%sqlite)
  (export '%sqlite::+lock-reserved+ :%sqlite)
  (export '%sqlite::+lock-shared+ :%sqlite)
  (export '%sqlite::+mismatch+ :%sqlite)
  (export '%sqlite::+misuse+ :%sqlite)
  (export '%sqlite::+mutex-fast+ :%sqlite)
  (export '%sqlite::+mutex-recursive+ :%sqlite)
  (export '%sqlite::+mutex-static-app1+ :%sqlite)
  (export '%sqlite::+mutex-static-app2+ :%sqlite)
  (export '%sqlite::+mutex-static-app3+ :%sqlite)
  (export '%sqlite::+mutex-static-lru+ :%sqlite)
  (export '%sqlite::+mutex-static-lru2+ :%sqlite)
  (export '%sqlite::+mutex-static-main+ :%sqlite)
  (export '%sqlite::+mutex-static-master+ :%sqlite)
  (export '%sqlite::+mutex-static-mem+ :%sqlite)
  (export '%sqlite::+mutex-static-mem2+ :%sqlite)
  (export '%sqlite::+mutex-static-open+ :%sqlite)
  (export '%sqlite::+mutex-static-pmem+ :%sqlite)
  (export '%sqlite::+mutex-static-prng+ :%sqlite)
  (export '%sqlite::+mutex-static-vfs1+ :%sqlite)
  (export '%sqlite::+mutex-static-vfs2+ :%sqlite)
  (export '%sqlite::+mutex-static-vfs3+ :%sqlite)
  (export '%sqlite::+nolfs+ :%sqlite)
  (export '%sqlite::+nomem+ :%sqlite)
  (export '%sqlite::+notadb+ :%sqlite)
  (export '%sqlite::+notfound+ :%sqlite)
  (export '%sqlite::+notice+ :%sqlite)
  (export '%sqlite::+notice-recover-rollback+ :%sqlite)
  (export '%sqlite::+notice-recover-wal+ :%sqlite)
  (export '%sqlite::+null+ :%sqlite)
  (export '%sqlite::+ok+ :%sqlite)
  (export '%sqlite::+ok-load-permanently+ :%sqlite)
  (export '%sqlite::+ok-symlink+ :%sqlite)
  (export '%sqlite::+open-autoproxy+ :%sqlite)
  (export '%sqlite::+open-create+ :%sqlite)
  (export '%sqlite::+open-deleteonclose+ :%sqlite)
  (export '%sqlite::+open-exclusive+ :%sqlite)
  (export '%sqlite::+open-exrescode+ :%sqlite)
  (export '%sqlite::+open-fullmutex+ :%sqlite)
  (export '%sqlite::+open-main-db+ :%sqlite)
  (export '%sqlite::+open-main-journal+ :%sqlite)
  (export '%sqlite::+open-master-journal+ :%sqlite)
  (export '%sqlite::+open-memory+ :%sqlite)
  (export '%sqlite::+open-nofollow+ :%sqlite)
  (export '%sqlite::+open-nomutex+ :%sqlite)
  (export '%sqlite::+open-privatecache+ :%sqlite)
  (export '%sqlite::+open-readonly+ :%sqlite)
  (export '%sqlite::+open-readwrite+ :%sqlite)
  (export '%sqlite::+open-sharedcache+ :%sqlite)
  (export '%sqlite::+open-subjournal+ :%sqlite)
  (export '%sqlite::+open-super-journal+ :%sqlite)
  (export '%sqlite::+open-temp-db+ :%sqlite)
  (export '%sqlite::+open-temp-journal+ :%sqlite)
  (export '%sqlite::+open-transient-db+ :%sqlite)
  (export '%sqlite::+open-uri+ :%sqlite)
  (export '%sqlite::+open-wal+ :%sqlite)
  (export '%sqlite::+perm+ :%sqlite)
  (export '%sqlite::+pragma+ :%sqlite)
  (export '%sqlite::+prepare-normalize+ :%sqlite)
  (export '%sqlite::+prepare-no-vtab+ :%sqlite)
  (export '%sqlite::+prepare-persistent+ :%sqlite)
  (export '%sqlite::+protocol+ :%sqlite)
  (export '%sqlite::+range+ :%sqlite)
  (export '%sqlite::+read+ :%sqlite)
  (export '%sqlite::+readonly+ :%sqlite)
  (export '%sqlite::+readonly-cantinit+ :%sqlite)
  (export '%sqlite::+readonly-cantlock+ :%sqlite)
  (export '%sqlite::+readonly-dbmoved+ :%sqlite)
  (export '%sqlite::+readonly-directory+ :%sqlite)
  (export '%sqlite::+readonly-recovery+ :%sqlite)
  (export '%sqlite::+readonly-rollback+ :%sqlite)
  (export '%sqlite::+recursive+ :%sqlite)
  (export '%sqlite::+reindex+ :%sqlite)
  (export '%sqlite::+replace+ :%sqlite)
  (export '%sqlite::+rollback+ :%sqlite)
  (export '%sqlite::+row+ :%sqlite)
  (export '%sqlite::+savepoint+ :%sqlite)
  (export '%sqlite::+scanstat-est+ :%sqlite)
  (export '%sqlite::+scanstat-explain+ :%sqlite)
  (export '%sqlite::+scanstat-name+ :%sqlite)
  (export '%sqlite::+scanstat-nloop+ :%sqlite)
  (export '%sqlite::+scanstat-nvisit+ :%sqlite)
  (export '%sqlite::+scanstat-selectid+ :%sqlite)
  (export '%sqlite::+schema+ :%sqlite)
  (export '%sqlite::+select+ :%sqlite)
  (export '%sqlite::+serialize-nocopy+ :%sqlite)
  (export '%sqlite::+set-lockproxyfile+ :%sqlite)
  (export '%sqlite::+shm-exclusive+ :%sqlite)
  (export '%sqlite::+shm-lock+ :%sqlite)
  (export '%sqlite::+shm-nlock+ :%sqlite)
  (export '%sqlite::+shm-shared+ :%sqlite)
  (export '%sqlite::+shm-unlock+ :%sqlite)
  (export '%sqlite::+source-id+ :%sqlite)
  (export '%sqlite::+static+ :%sqlite)
  (export '%sqlite::+status-malloc-count+ :%sqlite)
  (export '%sqlite::+status-malloc-size+ :%sqlite)
  (export '%sqlite::+status-memory-used+ :%sqlite)
  (export '%sqlite::+status-pagecache-overflow+ :%sqlite)
  (export '%sqlite::+status-pagecache-size+ :%sqlite)
  (export '%sqlite::+status-pagecache-used+ :%sqlite)
  (export '%sqlite::+status-parser-stack+ :%sqlite)
  (export '%sqlite::+status-scratch-overflow+ :%sqlite)
  (export '%sqlite::+status-scratch-size+ :%sqlite)
  (export '%sqlite::+status-scratch-used+ :%sqlite)
  (export '%sqlite::+stdcall+ :%sqlite)
  (export '%sqlite::+stmtstatus-autoindex+ :%sqlite)
  (export '%sqlite::+stmtstatus-filter-hit+ :%sqlite)
  (export '%sqlite::+stmtstatus-filter-miss+ :%sqlite)
  (export '%sqlite::+stmtstatus-fullscan-step+ :%sqlite)
  (export '%sqlite::+stmtstatus-memused+ :%sqlite)
  (export '%sqlite::+stmtstatus-reprepare+ :%sqlite)
  (export '%sqlite::+stmtstatus-run+ :%sqlite)
  (export '%sqlite::+stmtstatus-sort+ :%sqlite)
  (export '%sqlite::+stmtstatus-vm-step+ :%sqlite)
  (export '%sqlite::+subtype+ :%sqlite)
  (export '%sqlite::+sync-dataonly+ :%sqlite)
  (export '%sqlite::+sync-full+ :%sqlite)
  (export '%sqlite::+sync-normal+ :%sqlite)
  (export '%sqlite::+sysapi+ :%sqlite)
  (export '%sqlite::+testctrl-always+ :%sqlite)
  (export '%sqlite::+testctrl-assert+ :%sqlite)
  (export '%sqlite::+testctrl-benign-malloc-hooks+ :%sqlite)
  (export '%sqlite::+testctrl-bitvec-test+ :%sqlite)
  (export '%sqlite::+testctrl-byteorder+ :%sqlite)
  (export '%sqlite::+testctrl-explain-stmt+ :%sqlite)
  (export '%sqlite::+testctrl-extra-schema-checks+ :%sqlite)
  (export '%sqlite::+testctrl-fault-install+ :%sqlite)
  (export '%sqlite::+testctrl-first+ :%sqlite)
  (export '%sqlite::+testctrl-imposter+ :%sqlite)
  (export '%sqlite::+testctrl-internal-functions+ :%sqlite)
  (export '%sqlite::+testctrl-isinit+ :%sqlite)
  (export '%sqlite::+testctrl-iskeyword+ :%sqlite)
  (export '%sqlite::+testctrl-last+ :%sqlite)
  (export '%sqlite::+testctrl-localtime-fault+ :%sqlite)
  (export '%sqlite::+testctrl-logest+ :%sqlite)
  (export '%sqlite::+testctrl-never-corrupt+ :%sqlite)
  (export '%sqlite::+testctrl-once-reset-threshold+ :%sqlite)
  (export '%sqlite::+testctrl-optimizations+ :%sqlite)
  (export '%sqlite::+testctrl-parser-coverage+ :%sqlite)
  (export '%sqlite::+testctrl-pending-byte+ :%sqlite)
  (export '%sqlite::+testctrl-prng-reset+ :%sqlite)
  (export '%sqlite::+testctrl-prng-restore+ :%sqlite)
  (export '%sqlite::+testctrl-prng-save+ :%sqlite)
  (export '%sqlite::+testctrl-prng-seed+ :%sqlite)
  (export '%sqlite::+testctrl-reserve+ :%sqlite)
  (export '%sqlite::+testctrl-result-intreal+ :%sqlite)
  (export '%sqlite::+testctrl-scratchmalloc+ :%sqlite)
  (export '%sqlite::+testctrl-seek-count+ :%sqlite)
  (export '%sqlite::+testctrl-sorter-mmap+ :%sqlite)
  (export '%sqlite::+testctrl-traceflags+ :%sqlite)
  (export '%sqlite::+testctrl-tune+ :%sqlite)
  (export '%sqlite::+testctrl-vdbe-coverage+ :%sqlite)
  (export '%sqlite::+text+ :%sqlite)
  (export '%sqlite::+toobig+ :%sqlite)
  (export '%sqlite::+trace-close+ :%sqlite)
  (export '%sqlite::+trace-profile+ :%sqlite)
  (export '%sqlite::+trace-row+ :%sqlite)
  (export '%sqlite::+trace-stmt+ :%sqlite)
  (export '%sqlite::+transaction+ :%sqlite)
  (export '%sqlite::+transient+ :%sqlite)
  (export '%sqlite::+txn-none+ :%sqlite)
  (export '%sqlite::+txn-read+ :%sqlite)
  (export '%sqlite::+txn-write+ :%sqlite)
  (export '%sqlite::+update+ :%sqlite)
  (export '%sqlite::+utf16+ :%sqlite)
  (export '%sqlite::+utf16be+ :%sqlite)
  (export '%sqlite::+utf16le+ :%sqlite)
  (export '%sqlite::+utf16-aligned+ :%sqlite)
  (export '%sqlite::+utf8+ :%sqlite)
  (export '%sqlite::+version+ :%sqlite)
  (export '%sqlite::+version-number+ :%sqlite)
  (export '%sqlite::+vtab-constraint-support+ :%sqlite)
  (export '%sqlite::+vtab-directonly+ :%sqlite)
  (export '%sqlite::+vtab-innocuous+ :%sqlite)
  (export '%sqlite::+warning+ :%sqlite)
  (export '%sqlite::+warning-autoindex+ :%sqlite)
  (export '%sqlite::+win32-data-directory-type+ :%sqlite)
  (export '%sqlite::+win32-temp-directory-type+ :%sqlite)
  (export '%sqlite::context :%sqlite)
  (export '%sqlite::aggregate-context :%sqlite)
  (export '%sqlite::aggregate-count :%sqlite)
  (export '%sqlite::auto-extension :%sqlite)
  (export '%sqlite::sqlite3 :%sqlite)
  (export '%sqlite::autovacuum-pages :%sqlite)
  (export '%sqlite::backup :%sqlite)
  (export '%sqlite::backup-finish :%sqlite)
  (export '%sqlite::backup-init :%sqlite)
  (export '%sqlite::backup-pagecount :%sqlite)
  (export '%sqlite::backup-remaining :%sqlite)
  (export '%sqlite::backup-step :%sqlite)
  (export '%sqlite::stmt :%sqlite)
  (export '%sqlite::bind-blob :%sqlite)
  (export '%sqlite::uint64 :%sqlite)
  (export '%sqlite::bind-blob64 :%sqlite)
  (export '%sqlite::bind-double :%sqlite)
  (export '%sqlite::bind-int :%sqlite)
  (export '%sqlite::int64 :%sqlite)
  (export '%sqlite::bind-int64 :%sqlite)
  (export '%sqlite::bind-null :%sqlite)
  (export '%sqlite::bind-parameter-count :%sqlite)
  (export '%sqlite::bind-parameter-index :%sqlite)
  (export '%sqlite::bind-parameter-name :%sqlite)
  (export '%sqlite::bind-pointer :%sqlite)
  (export '%sqlite::bind-text :%sqlite)
  (export '%sqlite::bind-text16 :%sqlite)
  (export '%sqlite::bind-text64 :%sqlite)
  (export '%sqlite::value :%sqlite)
  (export '%sqlite::bind-value :%sqlite)
  (export '%sqlite::bind-zeroblob :%sqlite)
  (export '%sqlite::bind-zeroblob64 :%sqlite)
  (export '%sqlite::blob :%sqlite)
  (export '%sqlite::blob-bytes :%sqlite)
  (export '%sqlite::blob-close :%sqlite)
  (export '%sqlite::blob-open :%sqlite)
  (export '%sqlite::blob-read :%sqlite)
  (export '%sqlite::blob-reopen :%sqlite)
  (export '%sqlite::blob-write :%sqlite)
  (export '%sqlite::busy-handler :%sqlite)
  (export '%sqlite::busy-timeout :%sqlite)
  (export '%sqlite::cancel-auto-extension :%sqlite)
  (export '%sqlite::changes :%sqlite)
  (export '%sqlite::changes64 :%sqlite)
  (export '%sqlite::clear-bindings :%sqlite)
  (export '%sqlite::close :%sqlite)
  (export '%sqlite::close-v2 :%sqlite)
  (export '%sqlite::collation-needed :%sqlite)
  (export '%sqlite::collation-needed16 :%sqlite)
  (export '%sqlite::column-blob :%sqlite)
  (export '%sqlite::column-bytes :%sqlite)
  (export '%sqlite::column-bytes16 :%sqlite)
  (export '%sqlite::column-count :%sqlite)
  (export '%sqlite::column-database-name :%sqlite)
  (export '%sqlite::column-database-name16 :%sqlite)
  (export '%sqlite::column-decltype :%sqlite)
  (export '%sqlite::column-decltype16 :%sqlite)
  (export '%sqlite::column-double :%sqlite)
  (export '%sqlite::column-int :%sqlite)
  (export '%sqlite::column-int64 :%sqlite)
  (export '%sqlite::column-name :%sqlite)
  (export '%sqlite::column-name16 :%sqlite)
  (export '%sqlite::column-origin-name :%sqlite)
  (export '%sqlite::column-origin-name16 :%sqlite)
  (export '%sqlite::column-table-name :%sqlite)
  (export '%sqlite::column-table-name16 :%sqlite)
  (export '%sqlite::column-text :%sqlite)
  (export '%sqlite::column-text16 :%sqlite)
  (export '%sqlite::column-type :%sqlite)
  (export '%sqlite::column-value :%sqlite)
  (export '%sqlite::commit-hook :%sqlite)
  (export '%sqlite::compileoption-get :%sqlite)
  (export '%sqlite::compileoption-used :%sqlite)
  (export '%sqlite::complete :%sqlite)
  (export '%sqlite::complete16 :%sqlite)
  (export '%sqlite::config :%sqlite)
  (export '%sqlite::context-db-handle :%sqlite)
  (export '%sqlite::create-collation :%sqlite)
  (export '%sqlite::create-collation16 :%sqlite)
  (export '%sqlite::create-collation-v2 :%sqlite)
  (export '%sqlite::create-filename :%sqlite)
  (export '%sqlite::create-function :%sqlite)
  (export '%sqlite::create-function16 :%sqlite)
  (export '%sqlite::create-function-v2 :%sqlite)
  (export '%sqlite::i-version :%sqlite)
  (export '%sqlite::x-create :%sqlite)
  (export '%sqlite::x-connect :%sqlite)
  (export '%sqlite::x-best-index :%sqlite)
  (export '%sqlite::x-disconnect :%sqlite)
  (export '%sqlite::x-destroy :%sqlite)
  (export '%sqlite::x-open :%sqlite)
  (export '%sqlite::x-close :%sqlite)
  (export '%sqlite::x-filter :%sqlite)
  (export '%sqlite::x-next :%sqlite)
  (export '%sqlite::x-eof :%sqlite)
  (export '%sqlite::x-column :%sqlite)
  (export '%sqlite::x-rowid :%sqlite)
  (export '%sqlite::x-update :%sqlite)
  (export '%sqlite::x-begin :%sqlite)
  (export '%sqlite::x-sync :%sqlite)
  (export '%sqlite::x-commit :%sqlite)
  (export '%sqlite::x-rollback :%sqlite)
  (export '%sqlite::x-find-function :%sqlite)
  (export '%sqlite::x-rename :%sqlite)
  (export '%sqlite::x-savepoint :%sqlite)
  (export '%sqlite::x-release :%sqlite)
  (export '%sqlite::x-rollback-to :%sqlite)
  (export '%sqlite::x-shadow-name :%sqlite)
  (export '%sqlite::module :%sqlite)
  (export '%sqlite::create-module :%sqlite)
  (export '%sqlite::create-module-v2 :%sqlite)
  (export '%sqlite::create-window-function :%sqlite)
  (export '%sqlite::data-count :%sqlite)
  (export '%sqlite::x-read :%sqlite)
  (export '%sqlite::x-write :%sqlite)
  (export '%sqlite::x-truncate :%sqlite)
  (export '%sqlite::x-file-size :%sqlite)
  (export '%sqlite::x-lock :%sqlite)
  (export '%sqlite::x-unlock :%sqlite)
  (export '%sqlite::x-check-reserved-lock :%sqlite)
  (export '%sqlite::x-file-control :%sqlite)
  (export '%sqlite::x-sector-size :%sqlite)
  (export '%sqlite::x-device-characteristics :%sqlite)
  (export '%sqlite::x-shm-map :%sqlite)
  (export '%sqlite::x-shm-lock :%sqlite)
  (export '%sqlite::x-shm-barrier :%sqlite)
  (export '%sqlite::x-shm-unmap :%sqlite)
  (export '%sqlite::x-fetch :%sqlite)
  (export '%sqlite::x-unfetch :%sqlite)
  (export '%sqlite::io-methods :%sqlite)
  (export '%sqlite::p-methods :%sqlite)
  (export '%sqlite::file :%sqlite)
  (export '%sqlite::database-file-object :%sqlite)
  (export '%sqlite::db-cacheflush :%sqlite)
  (export '%sqlite::db-config :%sqlite)
  (export '%sqlite::db-filename :%sqlite)
  (export '%sqlite::db-handle :%sqlite)
  (export '%sqlite::mutex :%sqlite)
  (export '%sqlite::db-mutex :%sqlite)
  (export '%sqlite::db-readonly :%sqlite)
  (export '%sqlite::db-release-memory :%sqlite)
  (export '%sqlite::db-status :%sqlite)
  (export '%sqlite::declare-vtab :%sqlite)
  (export '%sqlite::deserialize :%sqlite)
  (export '%sqlite::drop-modules :%sqlite)
  (export '%sqlite::enable-load-extension :%sqlite)
  (export '%sqlite::enable-shared-cache :%sqlite)
  (export '%sqlite::errcode :%sqlite)
  (export '%sqlite::errmsg :%sqlite)
  (export '%sqlite::errmsg16 :%sqlite)
  (export '%sqlite::error-offset :%sqlite)
  (export '%sqlite::errstr :%sqlite)
  (export '%sqlite::exec :%sqlite)
  (export '%sqlite::expanded-sql :%sqlite)
  (export '%sqlite::expired :%sqlite)
  (export '%sqlite::extended-errcode :%sqlite)
  (export '%sqlite::extended-result-codes :%sqlite)
  (export '%sqlite::file-control :%sqlite)
  (export '%sqlite::filename-database :%sqlite)
  (export '%sqlite::filename-journal :%sqlite)
  (export '%sqlite::filename-wal :%sqlite)
  (export '%sqlite::finalize :%sqlite)
  (export '%sqlite::free :%sqlite)
  (export '%sqlite::free-filename :%sqlite)
  (export '%sqlite::free-table :%sqlite)
  (export '%sqlite::get-autocommit :%sqlite)
  (export '%sqlite::get-auxdata :%sqlite)
  (export '%sqlite::get-table :%sqlite)
  (export '%sqlite::global-recover :%sqlite)
  (export '%sqlite::hard-heap-limit64 :%sqlite)
  (export '%sqlite::initialize :%sqlite)
  (export '%sqlite::interrupt :%sqlite)
  (export '%sqlite::keyword-check :%sqlite)
  (export '%sqlite::keyword-count :%sqlite)
  (export '%sqlite::keyword-name :%sqlite)
  (export '%sqlite::last-insert-rowid :%sqlite)
  (export '%sqlite::libversion :%sqlite)
  (export '%sqlite::libversion-number :%sqlite)
  (export '%sqlite::limit :%sqlite)
  (export '%sqlite::load-extension :%sqlite)
  (export '%sqlite::log :%sqlite)
  (export '%sqlite::malloc :%sqlite)
  (export '%sqlite::malloc64 :%sqlite)
  (export '%sqlite::memory-alarm :%sqlite)
  (export '%sqlite::memory-highwater :%sqlite)
  (export '%sqlite::memory-used :%sqlite)
  (export '%sqlite::mprintf :%sqlite)
  (export '%sqlite::msize :%sqlite)
  (export '%sqlite::mutex-alloc :%sqlite)
  (export '%sqlite::mutex-enter :%sqlite)
  (export '%sqlite::mutex-free :%sqlite)
  (export '%sqlite::mutex-held :%sqlite)
  (export '%sqlite::mutex-leave :%sqlite)
  (export '%sqlite::mutex-notheld :%sqlite)
  (export '%sqlite::mutex-try :%sqlite)
  (export '%sqlite::next-stmt :%sqlite)
  (export '%sqlite::open :%sqlite)
  (export '%sqlite::open16 :%sqlite)
  (export '%sqlite::open-v2 :%sqlite)
  (export '%sqlite::os-end :%sqlite)
  (export '%sqlite::os-init :%sqlite)
  (export '%sqlite::overload-function :%sqlite)
  (export '%sqlite::prepare :%sqlite)
  (export '%sqlite::prepare16 :%sqlite)
  (export '%sqlite::prepare16-v2 :%sqlite)
  (export '%sqlite::prepare16-v3 :%sqlite)
  (export '%sqlite::prepare-v2 :%sqlite)
  (export '%sqlite::prepare-v3 :%sqlite)
  (export '%sqlite::profile :%sqlite)
  (export '%sqlite::progress-handler :%sqlite)
  (export '%sqlite::randomness :%sqlite)
  (export '%sqlite::realloc :%sqlite)
  (export '%sqlite::realloc64 :%sqlite)
  (export '%sqlite::release-memory :%sqlite)
  (export '%sqlite::reset :%sqlite)
  (export '%sqlite::reset-auto-extension :%sqlite)
  (export '%sqlite::result-blob :%sqlite)
  (export '%sqlite::result-blob64 :%sqlite)
  (export '%sqlite::result-double :%sqlite)
  (export '%sqlite::result-error :%sqlite)
  (export '%sqlite::result-error16 :%sqlite)
  (export '%sqlite::result-error-code :%sqlite)
  (export '%sqlite::result-error-nomem :%sqlite)
  (export '%sqlite::result-error-toobig :%sqlite)
  (export '%sqlite::result-int :%sqlite)
  (export '%sqlite::result-int64 :%sqlite)
  (export '%sqlite::result-null :%sqlite)
  (export '%sqlite::result-pointer :%sqlite)
  (export '%sqlite::result-subtype :%sqlite)
  (export '%sqlite::result-text :%sqlite)
  (export '%sqlite::result-text16 :%sqlite)
  (export '%sqlite::result-text16be :%sqlite)
  (export '%sqlite::result-text16le :%sqlite)
  (export '%sqlite::result-text64 :%sqlite)
  (export '%sqlite::result-value :%sqlite)
  (export '%sqlite::result-zeroblob :%sqlite)
  (export '%sqlite::result-zeroblob64 :%sqlite)
  (export '%sqlite::rollback-hook :%sqlite)
  (export '%sqlite::rtree-geometry-callback :%sqlite)
  (export '%sqlite::rtree-query-callback :%sqlite)
  (export '%sqlite::serialize :%sqlite)
  (export '%sqlite::set-authorizer :%sqlite)
  (export '%sqlite::set-auxdata :%sqlite)
  (export '%sqlite::set-last-insert-rowid :%sqlite)
  (export '%sqlite::shutdown :%sqlite)
  (export '%sqlite::sleep :%sqlite)
  (export '%sqlite::hidden :%sqlite)
  (export '%sqlite::snapshot :%sqlite)
  (export '%sqlite::snapshot-cmp :%sqlite)
  (export '%sqlite::snapshot-free :%sqlite)
  (export '%sqlite::snapshot-get :%sqlite)
  (export '%sqlite::snapshot-open :%sqlite)
  (export '%sqlite::snapshot-recover :%sqlite)
  (export '%sqlite::snprintf :%sqlite)
  (export '%sqlite::soft-heap-limit :%sqlite)
  (export '%sqlite::soft-heap-limit64 :%sqlite)
  (export '%sqlite::sourceid :%sqlite)
  (export '%sqlite::sql :%sqlite)
  (export '%sqlite::status :%sqlite)
  (export '%sqlite::status64 :%sqlite)
  (export '%sqlite::step :%sqlite)
  (export '%sqlite::stmt-busy :%sqlite)
  (export '%sqlite::stmt-isexplain :%sqlite)
  (export '%sqlite::stmt-readonly :%sqlite)
  (export '%sqlite::stmt-scanstatus :%sqlite)
  (export '%sqlite::stmt-scanstatus-reset :%sqlite)
  (export '%sqlite::stmt-status :%sqlite)
  (export '%sqlite::str :%sqlite)
  (export '%sqlite::str-append :%sqlite)
  (export '%sqlite::str-appendall :%sqlite)
  (export '%sqlite::str-appendchar :%sqlite)
  (export '%sqlite::str-appendf :%sqlite)
  (export '%sqlite::str-errcode :%sqlite)
  (export '%sqlite::str-finish :%sqlite)
  (export '%sqlite::str-length :%sqlite)
  (export '%sqlite::str-new :%sqlite)
  (export '%sqlite::str-reset :%sqlite)
  (export '%sqlite::str-value :%sqlite)
  (export '%sqlite::str-vappendf :%sqlite)
  (export '%sqlite::strglob :%sqlite)
  (export '%sqlite::stricmp :%sqlite)
  (export '%sqlite::strlike :%sqlite)
  (export '%sqlite::strnicmp :%sqlite)
  (export '%sqlite::system-errno :%sqlite)
  (export '%sqlite::table-column-metadata :%sqlite)
  (export '%sqlite::test-control :%sqlite)
  (export '%sqlite::thread-cleanup :%sqlite)
  (export '%sqlite::threadsafe :%sqlite)
  (export '%sqlite::total-changes :%sqlite)
  (export '%sqlite::total-changes64 :%sqlite)
  (export '%sqlite::trace :%sqlite)
  (export '%sqlite::trace-v2 :%sqlite)
  (export '%sqlite::transfer-bindings :%sqlite)
  (export '%sqlite::txn-state :%sqlite)
  (export '%sqlite::unlock-notify :%sqlite)
  (export '%sqlite::update-hook :%sqlite)
  (export '%sqlite::uri-boolean :%sqlite)
  (export '%sqlite::uri-int64 :%sqlite)
  (export '%sqlite::uri-key :%sqlite)
  (export '%sqlite::uri-parameter :%sqlite)
  (export '%sqlite::user-data :%sqlite)
  (export '%sqlite::value-blob :%sqlite)
  (export '%sqlite::value-bytes :%sqlite)
  (export '%sqlite::value-bytes16 :%sqlite)
  (export '%sqlite::value-double :%sqlite)
  (export '%sqlite::value-dup :%sqlite)
  (export '%sqlite::value-free :%sqlite)
  (export '%sqlite::value-frombind :%sqlite)
  (export '%sqlite::value-int :%sqlite)
  (export '%sqlite::value-int64 :%sqlite)
  (export '%sqlite::value-nochange :%sqlite)
  (export '%sqlite::value-numeric-type :%sqlite)
  (export '%sqlite::value-pointer :%sqlite)
  (export '%sqlite::value-subtype :%sqlite)
  (export '%sqlite::value-text :%sqlite)
  (export '%sqlite::value-text16 :%sqlite)
  (export '%sqlite::value-text16be :%sqlite)
  (export '%sqlite::value-text16le :%sqlite)
  (export '%sqlite::value-type :%sqlite)
  (export '%sqlite::vfs :%sqlite)
  (export '%sqlite::sz-os-file :%sqlite)
  (export '%sqlite::mx-pathname :%sqlite)
  (export '%sqlite::p-next :%sqlite)
  (export '%sqlite::z-name :%sqlite)
  (export '%sqlite::p-app-data :%sqlite)
  (export '%sqlite::x-delete :%sqlite)
  (export '%sqlite::x-access :%sqlite)
  (export '%sqlite::x-full-pathname :%sqlite)
  (export '%sqlite::x-dl-open :%sqlite)
  (export '%sqlite::x-dl-error :%sqlite)
  (export '%sqlite::x-dl-sym :%sqlite)
  (export '%sqlite::x-dl-close :%sqlite)
  (export '%sqlite::x-randomness :%sqlite)
  (export '%sqlite::x-sleep :%sqlite)
  (export '%sqlite::x-current-time :%sqlite)
  (export '%sqlite::x-get-last-error :%sqlite)
  (export '%sqlite::x-current-time-int64 :%sqlite)
  (export '%sqlite::x-set-system-call :%sqlite)
  (export '%sqlite::x-get-system-call :%sqlite)
  (export '%sqlite::x-next-system-call :%sqlite)
  (export '%sqlite::vfs-find :%sqlite)
  (export '%sqlite::vfs-register :%sqlite)
  (export '%sqlite::vfs-unregister :%sqlite)
  (export '%sqlite::vmprintf :%sqlite)
  (export '%sqlite::vsnprintf :%sqlite)
  (export '%sqlite::i-column :%sqlite)
  (export '%sqlite::op :%sqlite)
  (export '%sqlite::usable :%sqlite)
  (export '%sqlite::i-term-offset :%sqlite)
  (export '%sqlite::index-constraint :%sqlite)
  (export '%sqlite::desc :%sqlite)
  (export '%sqlite::index-orderby :%sqlite)
  (export '%sqlite::argv-index :%sqlite)
  (export '%sqlite::omit :%sqlite)
  (export '%sqlite::index-constraint-usage :%sqlite)
  (export '%sqlite::n-constraint :%sqlite)
  (export '%sqlite::a-constraint :%sqlite)
  (export '%sqlite::n-order-by :%sqlite)
  (export '%sqlite::a-order-by :%sqlite)
  (export '%sqlite::a-constraint-usage :%sqlite)
  (export '%sqlite::idx-num :%sqlite)
  (export '%sqlite::idx-str :%sqlite)
  (export '%sqlite::need-to-free-idx-str :%sqlite)
  (export '%sqlite::order-by-consumed :%sqlite)
  (export '%sqlite::estimated-cost :%sqlite)
  (export '%sqlite::estimated-rows :%sqlite)
  (export '%sqlite::idx-flags :%sqlite)
  (export '%sqlite::col-used :%sqlite)
  (export '%sqlite::index-info :%sqlite)
  (export '%sqlite::vtab-collation :%sqlite)
  (export '%sqlite::vtab-config :%sqlite)
  (export '%sqlite::vtab-distinct :%sqlite)
  (export '%sqlite::vtab-in :%sqlite)
  (export '%sqlite::vtab-in-first :%sqlite)
  (export '%sqlite::vtab-in-next :%sqlite)
  (export '%sqlite::vtab-nochange :%sqlite)
  (export '%sqlite::vtab-on-conflict :%sqlite)
  (export '%sqlite::vtab-rhs-value :%sqlite)
  (export '%sqlite::wal-autocheckpoint :%sqlite)
  (export '%sqlite::wal-checkpoint :%sqlite)
  (export '%sqlite::wal-checkpoint-v2 :%sqlite)
  (export '%sqlite::wal-hook :%sqlite)
  (export '%sqlite::win32-set-directory :%sqlite)
  (export '%sqlite::win32-set-directory16 :%sqlite)
  (export '%sqlite::win32-set-directory8 :%sqlite)
  (export '%sqlite::gp-offset :%sqlite)
  (export '%sqlite::fp-offset :%sqlite)
  (export '%sqlite::overflow-arg-area :%sqlite)
  (export '%sqlite::reg-save-area :%sqlite)
  (export '%sqlite::%%va-list-tag :%sqlite)
  (export '%sqlite::api-routines :%sqlite)
  (export '%sqlite::x-malloc :%sqlite)
  (export '%sqlite::x-free :%sqlite)
  (export '%sqlite::x-realloc :%sqlite)
  (export '%sqlite::x-size :%sqlite)
  (export '%sqlite::x-roundup :%sqlite)
  (export '%sqlite::x-init :%sqlite)
  (export '%sqlite::x-shutdown :%sqlite)
  (export '%sqlite::mem-methods :%sqlite)
  (export '%sqlite::x-mutex-init :%sqlite)
  (export '%sqlite::x-mutex-end :%sqlite)
  (export '%sqlite::x-mutex-alloc :%sqlite)
  (export '%sqlite::x-mutex-free :%sqlite)
  (export '%sqlite::x-mutex-enter :%sqlite)
  (export '%sqlite::x-mutex-try :%sqlite)
  (export '%sqlite::x-mutex-leave :%sqlite)
  (export '%sqlite::x-mutex-held :%sqlite)
  (export '%sqlite::x-mutex-notheld :%sqlite)
  (export '%sqlite::mutex-methods :%sqlite)
  (export '%sqlite::pcache :%sqlite)
  (export '%sqlite::p-arg :%sqlite)
  (export '%sqlite::x-cachesize :%sqlite)
  (export '%sqlite::x-pagecount :%sqlite)
  (export '%sqlite::x-unpin :%sqlite)
  (export '%sqlite::x-rekey :%sqlite)
  (export '%sqlite::pcache-methods :%sqlite)
  (export '%sqlite::x-shrink :%sqlite)
  (export '%sqlite::pcache-methods2 :%sqlite)
  (export '%sqlite::p-buf :%sqlite)
  (export '%sqlite::p-extra :%sqlite)
  (export '%sqlite::pcache-page :%sqlite)
  (export '%sqlite::rtree-dbl :%sqlite)
  (export '%sqlite::p-context :%sqlite)
  (export '%sqlite::n-param :%sqlite)
  (export '%sqlite::a-param :%sqlite)
  (export '%sqlite::p-user :%sqlite)
  (export '%sqlite::x-del-user :%sqlite)
  (export '%sqlite::rtree-geometry :%sqlite)
  (export '%sqlite::a-coord :%sqlite)
  (export '%sqlite::an-queue :%sqlite)
  (export '%sqlite::n-coord :%sqlite)
  (export '%sqlite::i-level :%sqlite)
  (export '%sqlite::mx-level :%sqlite)
  (export '%sqlite::i-rowid :%sqlite)
  (export '%sqlite::r-parent-score :%sqlite)
  (export '%sqlite::e-parent-within :%sqlite)
  (export '%sqlite::e-within :%sqlite)
  (export '%sqlite::r-score :%sqlite)
  (export '%sqlite::ap-sql-param :%sqlite)
  (export '%sqlite::rtree-query-info :%sqlite)
  (export '%sqlite::p-module :%sqlite)
  (export '%sqlite::n-ref :%sqlite)
  (export '%sqlite::z-err-msg :%sqlite)
  (export '%sqlite::vtab :%sqlite)
  (export '%sqlite::p-vtab :%sqlite)
  (export '%sqlite::vtab-cursor :%sqlite)
  (export '%sqlite::*data-directory* :%sqlite)
  (export '%sqlite::*temp-directory* :%sqlite)
  (export '%sqlite::*version* :%sqlite)
  (export '%sqlite::callback :%sqlite)
  (export '%sqlite::destructor-type :%sqlite)
  (export '%sqlite::syscall-ptr :%sqlite))

